### YamlMime:Tutorial
title: <span data-ttu-id="ca569-101">C# 中的插入字串</span><span class="sxs-lookup"><span data-stu-id="ca569-101">Interpolated strings in C#</span></span>
metadata:
  title: 插入字串互動式教學課程 - C# 快速入門
  description: 在本教學課程中，您將使用瀏覽器，以互動方式使用 C# 插入字串功能。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: <span data-ttu-id="ca569-105">C# 中的集合</span><span class="sxs-lookup"><span data-stu-id="ca569-105">Collections in C#</span></span>
  ms.openlocfilehash: 7e1de34c9075826a6fcb6bf71cb01bfbd5c215ca
  ms.sourcegitcommit: 935d5267c44f9bce801468ef95f44572f1417e8c
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 03/28/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="ca569-106">本快速入門將教導您如何在 C# 中使用插入字串，以互動方式將值插入至單一輸出字串。</span><span class="sxs-lookup"><span data-stu-id="ca569-106">This quickstart teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id="ca569-107">您可以使用瀏覽器撰寫 C# 程式碼，而且可以立即查看編譯和執行程式碼的結果。</span><span class="sxs-lookup"><span data-stu-id="ca569-107">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id="ca569-108">快速入門包含一系列的課程，說明如何串連字串、將值插入至字串，並以不同的方式設定那些值的格式。</span><span class="sxs-lookup"><span data-stu-id="ca569-108">The quickstart contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>
- title: <span data-ttu-id="ca569-109">建立插入字串</span><span class="sxs-lookup"><span data-stu-id="ca569-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"ca569-110\">在互動式視窗中執行下列程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"ca569-111\">若要這樣做，請在互動式視窗中鍵入下列程式碼區塊 (將 \"\\<名稱>\" 取代為您的名稱)，然後按一下 [執行] 按鈕：</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-111\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"ca569-112\">當您執行程式時，它會顯示問候語中包含您名稱的單一字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-112\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"ca569-113\"><xref:System.Console.WriteLine%2A> 方法呼叫中所含的字串是「插入字串」。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-113\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"ca569-114\">它是一種範本，可讓您從包含內嵌程式碼的字串建構單一字串 (稱為「結果字串」)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"ca569-115\">插入字串特別適用於將值插入至字串或將字串串連 (聯結在一起)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"ca569-116\">這個簡單範例包含每個插入字串都必須要有的兩個項目：</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-116\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"ca569-117\">左引號字元之前開頭為 `$` 字元的字串常值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"ca569-118\">`$` 符號與引號字元之間不能有任何空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"ca569-119\">(如果您想要查看包含空格時會發生什麼情況，請在互動式視窗中於 `$` 字元後面插入空格，然後按一下 [執行] 按鈕。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"ca569-120\">C# 編譯器抱怨「未預期的字元 '$'」)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"ca569-121\">一或多個「插入運算式」。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"ca569-122\">插入運算式是以左右大括號 (`{` 和 `}`) 指出。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"ca569-123\">您可以放置任何 C# 運算式，以傳回大括號內的值 (包含 `null`)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"ca569-124\">嘗試更多包含一些其他資料類型的插入字串範例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-124\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"ca569-125\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ca569-126\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="ca569-127">包含不同的資料類型</span><span class="sxs-lookup"><span data-stu-id="ca569-127">Include different data types</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"ca569-128\">在前一個快速入門中，您使用插入字串將某個字串插入至另一個字串內部。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-128\">In the previous quickstart, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"ca569-129\">不過，插入字串運算式可以是任意資料類型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-129\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"ca569-130\">嘗試具有多個資料類型值的插入字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-130\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"ca569-131\">下列範例包含具有 `Vegetable` 物件的插入運算式、`Unit` 列舉的成員、<xref:System.DateTime> 值和 <xref:System.Decimal> 值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-131\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"ca569-132\">在互動式視窗中執行它。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-132\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"ca569-133\">請注意，其中一個插入運算式包含向主控台顯示之結果字串中的 `item` 物件，而在此情況下，會將字串 \"eggplant\" 插入至結果字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-133\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"ca569-134\">原因是插入運算式的類型不是字串時，C# 編譯器會執行下列作業：</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-134\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"ca569-135\">如果插入運算式是 `null`，則插入運算式會傳回空字串 (\"\" 或 <xref:System.String.Empty?displayProperty=nameWithType>)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-135\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"ca569-136\">如果插入運算式不是 `null`，則會呼叫插入運算式類型的 `ToString` 方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-136\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"ca569-137\">您可以註銷範例中 `Vegetable.ToString` 方法的定義來進行測試，方式是在其前面放置註解符號 (`//`)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-137\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"ca569-138\">在輸出中，字串 \"eggplant\" 會取代為完整類型名稱 (C# REPL 所定義的命名空間與類型名稱)，這是 <xref:System.Object.ToString?displayProperty=nameWithType> 方法的預設行為。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-138\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"ca569-139\">在此範例的輸出中，日期太過精確 (eggplant 價格不會因第二個而變更)，而價格值未指出貨幣單位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-139\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"ca569-140\">在下一個步驟中，您將學習如何控制插入運算式所傳回字串的格式來修正這些問題。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-140\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"ca569-141\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-141\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ca569-142\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-142\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="ca569-143">控制插入運算式的格式</span><span class="sxs-lookup"><span data-stu-id="ca569-143">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="ca569-144">在上一個課程中，已將兩個格式不佳的字串插入至結果字串。</span><span class="sxs-lookup"><span data-stu-id="ca569-144">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="ca569-145">其中一個是只有日期才適合的日期和時間值。</span><span class="sxs-lookup"><span data-stu-id="ca569-145">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="ca569-146">第二個是未指出其貨幣單位的價格。</span><span class="sxs-lookup"><span data-stu-id="ca569-146">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id="ca569-147">這兩個問題都很容易解決。</span><span class="sxs-lookup"><span data-stu-id="ca569-147">Both issues are easy to address.</span></span> <span data-ttu-id="ca569-148">插入運算式可以包含「格式字串」，以控制特定類型的格式。</span><span class="sxs-lookup"><span data-stu-id="ca569-148">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="ca569-149">修改前一個範例中的 `Console.WriteLine` 呼叫，使其包含日期和價位欄位的格式規範，如下行所示：</span><span class="sxs-lookup"><span data-stu-id="ca569-149">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="ca569-150">在插入運算式後面接著冒號和格式字串，即可指定格式字串。</span><span class="sxs-lookup"><span data-stu-id="ca569-150">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id="ca569-151">"d" 是[標準日期和時間格式字串](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，可呈現簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="ca569-151">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="ca569-152">"C2" 是[標準數值格式字串](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，可將數字呈現為小數點後面有兩位數的貨幣值。</span><span class="sxs-lookup"><span data-stu-id="ca569-152">"C2" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="ca569-153">.NET Standard 程式庫中有多種類型都支援一組預先定義的格式字串。</span><span class="sxs-lookup"><span data-stu-id="ca569-153">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id="ca569-154">其中包含所有數值類型以及日期和時間類型。</span><span class="sxs-lookup"><span data-stu-id="ca569-154">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="ca569-155">如需支援格式字串之類型的完整清單，請參閱[在 .NET 中格式化類型](../../standard/base-types/formatting-types.md)一文中的[格式字串和 .NET 類別庫類型](../../standard/base-types/formatting-types.md#stringRef)。</span><span class="sxs-lookup"><span data-stu-id="ca569-155">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id="ca569-156">任何類型都可以支援一組格式字串，而且您也可以開發自訂格式延伸模組，以提供現有類型的自訂格式。</span><span class="sxs-lookup"><span data-stu-id="ca569-156">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id="ca569-157">如需透過提供 <xref:System.ICustomFormatter> 實作以自訂格式的資訊，請參閱[在 .NET 中格式化類型](../../standard/base-types/formatting-types.md)一文中的[使用 ICustomFormatter 的自訂格式](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)。</span><span class="sxs-lookup"><span data-stu-id="ca569-157">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="ca569-158">嘗試在 **.NET 編輯器**中修改格式字串，以查看它們對日期和時間以及數值格式的影響。</span><span class="sxs-lookup"><span data-stu-id="ca569-158">Try modifying the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="ca569-159">將 `{date:d}` 中的 "d" 變更為 "t" (顯示簡短時間格式)、"y" (顯示年份和月份) 以及 "yyyy" (將年份顯示為四位數)。</span><span class="sxs-lookup"><span data-stu-id="ca569-159">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="ca569-160">將 `{price:C2}` 中的 "C2" 變更為 "e" (適用於指數標記法) 和 "F3" (適用於小數點後面有三位數的數值)。</span><span class="sxs-lookup"><span data-stu-id="ca569-160">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="ca569-161">除了控制格式之外，您也可以控制插入運算式所傳回字串的欄位寬度和對齊方式。</span><span class="sxs-lookup"><span data-stu-id="ca569-161">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id="ca569-162">在下一步，您將學習如何執行這項作業。</span><span class="sxs-lookup"><span data-stu-id="ca569-162">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ca569-163">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="ca569-163">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca569-164">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="ca569-164">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca569-165">控制插入運算式的欄位寬度和對齊方式</span><span class="sxs-lookup"><span data-stu-id="ca569-165">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: "<span data-ttu-id=\"ca569-166\">一般情況下，結果字串中包含插入運算式所傳回的字串時，不會有任何前置或尾端空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-166\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"ca569-167\">特別是使用一組資料時，插入運算式可讓您指定欄位寬度和其對齊方式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-167\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"ca569-168\">若要查看此結果，請執行下列程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-168\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"ca569-169\">項目名稱會靠左對齊，而其數量會靠右對齊。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-169\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"ca569-170\">在運算式後面新增逗號 (\",\")，並指定欄位寬度，即可指定對齊方式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-170\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"ca569-171\">如果欄位寬度是正數，則欄位會靠右對齊：</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-171\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"ca569-172\">如果欄位寬度是負數，則欄位會靠左對齊：</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-172\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"ca569-173\">嘗試移除 `{\"Item\",-25}` 和 `{item.Key,-25}` 插入運算式中的負號，然後重新執行此範例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-173\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"ca569-174\">目前，項目名稱會靠右對齊。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-174\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"ca569-175\">您可以將欄位寬度和格式字串結合到單一插入運算式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-175\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"ca569-176\">先出現欄位寬度，後面接著冒號和格式字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-176\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"ca569-177\">嘗試下列簡單程式，以顯示含有所定義欄位寬度的三個格式化字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-177\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"ca569-178\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-178\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ca569-179\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-179\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"ca569-180\">您已完成插入字串快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-180\">You've completed the interpolated strings quickstart.</span></span> \n\n<span data-ttu-id=\"ca569-181\">您可以在自己的本機開發環境中繼續進行這些快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-181\">You can continue these quickstarts on your own local development environment.</span></span> <span data-ttu-id=\"ca569-182\">了解[本機開發](local-environment.md)的基本概念，然後選擇一個快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-182\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"ca569-183\">您可以嘗試這個相同的練習、直接移至下一個快速入門，或從 [C# 中的數字](numbers-in-csharp-local.md)快速入門重新開始。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-183\">You can try this same exercise, move directly to the next quickstart, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"ca569-184\">您可以在＜C# 參考＞的[字串內插補點](../language-reference/tokens/interpolated.md)主題中，深入了解字串內插補點。</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca569-184\">You can learn more about interpolated strings in the [String interpolation](../language-reference/tokens/interpolated.md) topic in the C# Reference.</span></span>"
