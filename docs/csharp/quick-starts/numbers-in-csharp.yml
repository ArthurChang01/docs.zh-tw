documentType: Tutorial
title: "<span data-ttu-id=\"94d90-101\">C# 中的數字</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-101\">Numbers in C#</span></span>"
metadata:
  title: "C# 中的數字"
  description: "在這個快速入門中有關數字類型，您將使用您的瀏覽器，若要了解 C# 以互動方式。 您將要撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "<span data-ttu-id=\"94d90-105\">分支和 C# 中的迴圈</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-105\">Branches and loops in C#</span></span>"
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"94d90-106\">本快速入門將教導您在 C# 中的數字類型，以互動方式使用您的瀏覽器以 C# 撰寫，並查看編譯和執行您的程式碼的結果。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-106\">This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"94d90-107\">內容包含一系列探索 C# 中數字和數學運算的課程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-107\">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id=\"94d90-108\">這些課程會教導您 C# 語言的基本概念。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-108\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 11/22/2017
- title: "<span data-ttu-id=\"94d90-109\">探索整數運算</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-109\">Explore integer math</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"94d90-110\">在互動式視窗中執行下列程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"94d90-111\">若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"94d90-112\">您看到的只是一種基本的整數數學運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"94d90-113\">`int` 型別代表**整數**，也就是正整數或負整數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"94d90-114\">您使用 `+` 符號來執行加法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"94d90-115\">整數常用的其他數學運算包括：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"94d90-116\">`-` 用於減法</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"94d90-117\">`*` 用於乘法</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"94d90-118\">`/` 用於除法</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"94d90-119\">這個整個快速入門，您可以自行探索透過修改您在互動式視窗中撰寫程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-119\">Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"94d90-120\">本快速入門會提供您可以嘗試在每個步驟的範例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-120\">This quick start provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"94d90-121\">讓我們開始探索這些不同的運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"94d90-122\">修改第三行來嘗試每種運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"94d90-123\">在每次編輯之後，按一下 [執行] 按鈕。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"94d90-124\">減法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"94d90-125\">乘法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"94d90-126\">除法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"94d90-127\">如果您想要的話，也可以試著在同一行中執行多個數學運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"94d90-128\">在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"94d90-129\">**編譯器**會找出那些錯誤並回報給您。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"94d90-130\">當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"94d90-131\">該練習將有助於您了解 C# 程式碼的結構。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"94d90-132\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"94d90-133\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"94d90-134\">探索運算的順序</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-134\">Explore order of operations</span></span>"
  durationInMinutes: 7
  content: "<span data-ttu-id=\"94d90-135\">針對不同數學運算的優先順序，C# 語言所定義的規則與您在數學所學的規則一致。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-135\">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>\n<span data-ttu-id=\"94d90-136\">乘法和除法的優先順序高於加法和減法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-136\">Multiplication and division take precedence over addition and subtraction.</span></span>\n<span data-ttu-id=\"94d90-137\">請在互動式視窗中執行下列程式碼來探索上述優先順序：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-137\">Explore that by running the following code in the interactive window:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"94d90-138\">輸出示範了程式會先執行乘法，然後再執行加法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-138\">The output demonstrates that the multiplication is performed before the addition.</span></span>\n\n<span data-ttu-id=\"94d90-139\">您可以在想要優先執行的一個或多個運算前後加上括號，以強制執行不同的運算順序：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-139\">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"94d90-140\">結合許多不同的運算來深入探索。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-140\">Explore more by combining many different operations.</span></span> <span data-ttu-id=\"94d90-141\">將上面的第四行取代為如下的內容：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-141\">Replace the fourth line above with something like this:</span></span>\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n<span data-ttu-id=\"94d90-142\">您可能已注意到整數某個有趣的行為。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-142\">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id=\"94d90-143\">整數除法一律會產生整數結果，即使您希望的結果以包含十進位或小數部分。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-143\">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>\n\n<span data-ttu-id=\"94d90-144\">如果您還沒看過這種行為，請嘗試下列運算：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-144\">If you haven't seen this behavior, try the following:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"94d90-145\">再次按一下 [執行] 來查看結果。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-145\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"94d90-146\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-146\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"94d90-147\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-147\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"94d90-148\">探索整數的精確度與限制</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-148\">Explore integer precision and limits</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"94d90-149\">上一個範例示範了整數除法運算會將結果截斷。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-149\">That last sample showed you that integer division truncates the result.</span></span>\n<span data-ttu-id=\"94d90-150\">您可以使用**模數**運算子 (`%` 字元) 來取得**餘數**：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-150\">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\n<span data-ttu-id=\"94d90-151\">C# 整數型別有一個地方與數學上的整數不同：`int` 型別有最小和最大限制。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-151\">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id=\"94d90-152\">請在互動式視窗中執行此程式碼來查看這些限制：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-152\">Run this code in the interactive window to see those limits:</span></span>\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n<span data-ttu-id=\"94d90-153\">如果計算產生的值超出這些限制，就會發生**反向溢位**或**溢位**的情況。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-153\">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id=\"94d90-154\">答案看起來會是從其中一個限制回繞至另一個限制。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-154\">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id=\"94d90-155\">將這兩行程式碼加入互動式視窗來查看範例：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-155\">Add these two lines to the interactive window to see an example:</span></span>\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n<span data-ttu-id=\"94d90-156\">請注意，答案非常接近最小 (負) 整數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-156\">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id=\"94d90-157\">這與 `min + 2` 相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-157\">It's the same as `min + 2`.</span></span> <span data-ttu-id=\"94d90-158\">此加法運算已**溢出**整數允許的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-158\">The addition operation **overflowed** the allowed values for integers.</span></span>\n<span data-ttu-id=\"94d90-159\">此答案是非常大的負數，這是因為溢位會從最大整數值「回繞」至最小整數值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-159\">The answer is a very large negative number because an overflow \"wraps around\" from the largest possible integer value to the smallest.</span></span>\n\n<span data-ttu-id=\"94d90-160\">當 `int` 型別不符合您的需求時，還有其他具有不同限制和精確度的數字型別可供使用。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-160\">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id=\"94d90-161\">我們會在下一篇探索那些數字型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-161\">Let's explore those next.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"94d90-162\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-162\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"94d90-163\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-163\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"94d90-164\">使用 Double 型別</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-164\">Work with the double type</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"94d90-165\">`double` 數字型別代表雙精確度浮點數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"94d90-166\">您可能不熟悉這些字詞。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"94d90-167\">A**浮點數**數目是用於表示非整數類資料可能非常大或最小範圍內的數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"94d90-168\">**雙精確度**表示這些數字使用比**單精確度**更高的精確度來儲存。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"94d90-169\">在現代的電腦上，比較常使用雙精確度而非單精確度數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"94d90-170\">讓我們開始探索吧。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-170\">Let's explore.</span></span> <span data-ttu-id=\"94d90-171\">在互動式視窗中嘗試下列程式碼並查看結果：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"94d90-172\">請注意答案包括商數的小數部分。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"94d90-173\">請嘗試略為複雜的雙精確度浮點數運算式：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"94d90-174\">雙精確度浮點數值的範圍遠大於整數值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"94d90-175\">在互動式視窗中嘗試下列程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"94d90-176\">這些值列印出來的科學記號標記法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"94d90-177\">左邊的數字`E`是有效的數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"94d90-178\">右邊的數字則為指數，亦即 10 的次方。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"94d90-179\">就像數學上的小數數字，C# 中的雙精確度浮點數會發生捨入誤差。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"94d90-180\">請嘗試此程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"94d90-181\">如您所知，`0.3` 循環與 `1/3` 並不完全相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"94d90-182\">***挑戰***</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"94d90-183\">嘗試使用 `double` 型別搭配大型數字、小型數字、乘法和除法的其他計算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"94d90-184\">嘗試更複雜的計算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"94d90-185\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"94d90-186\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"94d90-187\">使用固定點型別</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-187\">Work with fixed point types</span></span>"
  durationInMinutes: 8
  content: "<span data-ttu-id=\"94d90-188\">您已經看過 C# 中的基本數字型別：整數和雙精確度浮點數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"94d90-189\">還有一個您要了解的其他型別：`decimal` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"94d90-190\">`decimal`類型具有較小的範圍，但精確度卻高於`double`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"94d90-191\">**固定點**這個詞代表小數點 (或二進位點) 不會移動。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"94d90-192\">讓我們來看一下：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"94d90-193\">請注意該範圍小於 `double` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"94d90-194\">透過嘗試下列程式碼，您可以看到 decimal (小數) 型別有較高的精確度：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"94d90-195\">數字上的 `M` 尾碼乃是指示常數應使用 `decimal` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"94d90-196\">請注意，使用 decimal (小數) 型別的運算在小數點右邊會有更多的數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"94d90-197\">***挑戰***</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"94d90-198\">您已經了解不同的數字型別，接著請撰寫程式碼，以計算半徑 2.50 英吋的圓形面積。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id=\"94d90-199\">提醒您圓形面積是 PI 乘以半徑的平方。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"94d90-200\">提示： C# 包含 PI 常數<xref:System.Math.PI?displayProperty=nameWithType>可讓您針對該值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-200\">One hint: C# contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"94d90-201\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"94d90-202\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"94d90-203\">完成挑戰</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-203\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"94d90-204\">您已經完成 「 數字在 C# 中 「 快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-204\">You've completed the \"Numbers in C#\" quick start.</span></span> \n\n<span data-ttu-id=\"94d90-205\">您可以繼續在開發環境上的這些快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-205\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"94d90-206\">.NET 主題[開始在 10 分鐘後](https://www.microsoft.com/net/core)已設定您的本機開發環境的指示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-206\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"94d90-207\">完成之後，繼續進行[分支和迴圈](branches-and-loops-local.md)本機環境中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-207\">Once you've done that, continue with [Branches and loops](branches-and-loops-local.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"94d90-208\">您可以在下列主題中深入了解 C# 中的數字：</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-208\">You can learn more about numbers in C# in the following topics:</span></span>\n\n<span data-ttu-id=\"94d90-209\">[整數類型表](../language-reference/keywords/integral-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-209\">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  \n<span data-ttu-id=\"94d90-210\">[浮點類型表](../language-reference/keywords/floating-point-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-210\">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  \n<span data-ttu-id=\"94d90-211\">[內建類型表](../language-reference/keywords/built-in-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-211\">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  \n<span data-ttu-id=\"94d90-212\">[隱含數值轉換表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-212\">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  \n[<span data-ttu-id=\"94d90-213\">明確數值轉換表</span><span class=\"sxs-lookup\"><span data-stu-id=\"94d90-213\">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
