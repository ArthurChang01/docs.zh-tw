### YamlMime:YamlDocument
documentType: Tutorial
title: "C# 中的數字"
metadata:
  title: "C# 中的數字"
  description: "在這個快速入門中有關數字類型，您將使用您的瀏覽器，若要了解 C# 以互動方式。 您將要撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "分支和 C# 中的迴圈"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 11/22/2017
items:
- durationInMinutes: 1
  content: "本快速入門將教導您在 C# 中的數字類型，以互動方式使用您的瀏覽器以 C# 撰寫，並查看編譯和執行您的程式碼的結果。 內容包含一系列探索 C# 中數字和數學運算的課程。 這些課程會教導您 C# 語言的基本概念。\n"
- title: "探索整數運算"
  durationInMinutes: 4
  content: "在互動式視窗中執行下列程式碼。 若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n您看到的只是一種基本的整數數學運算。 `int` 型別代表**整數**，也就是正整數或負整數。 您使用 `+` 符號來執行加法。 整數常用的其他數學運算包括：\n\n- `-` 用於減法\n- `*` 用於乘法\n- `/` 用於除法\n\n> [!TIP]\n> 這個整個快速入門，您可以自行探索透過修改您在互動式視窗中撰寫程式碼。 本快速入門會提供您可以嘗試在每個步驟的範例。\n\n讓我們開始探索這些不同的運算。 修改第三行來嘗試每種運算。 在每次編輯之後，按一下 [執行] 按鈕。\n\n減法：\n\n```csharp\nint c = a - b;\n```\n\n乘法：\n\n```csharp\nint c = a * b;\n```\n\n除法： \n\n```csharp\nint c = a / b;\n```\n\n如果您想要的話，也可以試著在同一行中執行多個數學運算。\n\n> [!TIP]\n> 在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。 **編譯器**會找出那些錯誤並回報給您。 當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。\n> 該練習將有助於您了解 C# 程式碼的結構。     \n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "探索運算的順序"
  durationInMinutes: 7
  content: "針對不同數學運算的優先順序，C# 語言所定義的規則與您在數學所學的規則一致。\n乘法和除法的優先順序高於加法和減法。\n請在互動式視窗中執行下列程式碼來探索上述優先順序：\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n輸出示範了程式會先執行乘法，然後再執行加法。\n\n您可以在想要優先執行的一個或多個運算前後加上括號，以強制執行不同的運算順序：\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n結合許多不同的運算來深入探索。 將上面的第四行取代為如下的內容：\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n您可能已注意到整數某個有趣的行為。 整數除法一律會產生整數結果，即使您希望的結果以包含十進位或小數部分。\n\n如果您還沒看過這種行為，請嘗試下列運算：\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n再次按一下 [執行] 來查看結果。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "探索整數的精確度與限制"
  durationInMinutes: 5
  content: "上一個範例示範了整數除法運算會將結果截斷。\n您可以使用**模數**運算子 (`%` 字元) 來取得**餘數**：\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nC# 整數型別有一個地方與數學上的整數不同：`int` 型別有最小和最大限制。 請在互動式視窗中執行此程式碼來查看這些限制：\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n如果計算產生的值超出這些限制，就會發生**反向溢位**或**溢位**的情況。 答案看起來會是從其中一個限制回繞至另一個限制。 將這兩行程式碼加入互動式視窗來查看範例：\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n請注意，答案非常接近最小 (負) 整數。 這與 `min + 2` 相同。 此加法運算已**溢出**整數允許的值。\n此答案是非常大的負數，這是因為溢位會從最大整數值「回繞」至最小整數值。\n\n當 `int` 型別不符合您的需求時，還有其他具有不同限制和精確度的數字型別可供使用。 我們會在下一篇探索那些數字型別。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "使用 Double 型別"
  durationInMinutes: 5
  content: "`double` 數字型別代表雙精確度浮點數。 您可能不熟悉這些字詞。 A**浮點數**數目是用於表示非整數類資料可能非常大或最小範圍內的數字。 **雙精確度**表示這些數字使用比**單精確度**更高的精確度來儲存。 在現代的電腦上，比較常使用雙精確度而非單精確度數字。\n讓我們開始探索吧。 在互動式視窗中嘗試下列程式碼並查看結果：\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n請注意答案包括商數的小數部分。 請嘗試略為複雜的雙精確度浮點數運算式：\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n雙精確度浮點數值的範圍遠大於整數值。 在互動式視窗中嘗試下列程式碼：\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n這些值列印出來的科學記號標記法。 左邊的數字`E`是有效的數字。 右邊的數字則為指數，亦即 10 的次方。 \n\n就像數學上的小數數字，C# 中的雙精確度浮點數會發生捨入誤差。 請嘗試此程式碼：\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n如您所知，`0.3` 循環與 `1/3` 並不完全相同。\n\n***挑戰***\n\n嘗試使用 `double` 型別搭配大型數字、小型數字、乘法和除法的其他計算。  嘗試更複雜的計算。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "使用固定點型別"
  durationInMinutes: 8
  content: "您已經看過 C# 中的基本數字型別：整數和雙精確度浮點數。  還有一個您要了解的其他型別：`decimal` 型別。 `decimal`類型具有較小的範圍，但精確度卻高於`double`。 **固定點**這個詞代表小數點 (或二進位點) 不會移動。 讓我們來看一下：\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n請注意該範圍小於 `double` 型別。 透過嘗試下列程式碼，您可以看到 decimal (小數) 型別有較高的精確度：\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n數字上的 `M` 尾碼乃是指示常數應使用 `decimal` 型別。\n\n請注意，使用 decimal (小數) 型別的運算在小數點右邊會有更多的數字。 \n\n***挑戰***\n\n您已經了解不同的數字型別，接著請撰寫程式碼，以計算半徑 2.50 英吋的圓形面積。 提醒您圓形面積是 PI 乘以半徑的平方。 提示： C# 包含 PI 常數<xref:System.Math.PI?displayProperty=nameWithType>可讓您針對該值。 \n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "完成挑戰"
  durationInMinutes: 1
  content: "您已經完成 「 數字在 C# 中 「 快速入門。 \n\n您可以繼續在開發環境上的這些快速入門。 .NET 主題[開始在 10 分鐘後](https://www.microsoft.com/net/core)已設定您的本機開發環境的指示。 完成之後，繼續進行[分支和迴圈](branches-and-loops-local.md)本機環境中。\n\n您可以在下列主題中深入了解 C# 中的數字：\n\n[整數類型表](../language-reference/keywords/integral-types-table.md)   \n[浮點類型表](../language-reference/keywords/floating-point-types-table.md)   \n[內建類型表](../language-reference/keywords/built-in-types-table.md)   \n[隱含數值轉換表](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[明確數值轉換表](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
