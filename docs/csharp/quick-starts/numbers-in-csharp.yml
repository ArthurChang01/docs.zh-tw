### YamlMime:Tutorial
title: <span data-ttu-id="2d431-101">C# 中的數字</span><span class="sxs-lookup"><span data-stu-id="2d431-101">Numbers in C#</span></span>
metadata:
  title: C# 中的數字互動式教學課程 - C# 快速入門
  description: 在此快速入門中，您將使用瀏覽器以互動方式學習有關 C# 的數字型別。 您將要撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。
  audience: Developer
  ms.topic: quickstart
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="2d431-105">C# 中的分支與迴圈</span><span class="sxs-lookup"><span data-stu-id="2d431-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 473d0619ad9a68e9d5aea0cf5fa9daf092f623f5
  ms.sourcegitcommit: 2eceb05f1a5bb261291a1f6a91c5153727ac1c19
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 09/04/2018
  ms.locfileid: "43507852"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="2d431-106">此快速入門會以互動方式進行 C# 中數字型別的教學，您可使用瀏覽器撰寫 C# 程式碼，並查看程式碼編譯及執行的結果。</span><span class="sxs-lookup"><span data-stu-id="2d431-106">This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="2d431-107">內容包含一系列探索 C# 中數字和數學運算的課程。</span><span class="sxs-lookup"><span data-stu-id="2d431-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="2d431-108">這些課程會教導您 C# 語言的基本概念。</span><span class="sxs-lookup"><span data-stu-id="2d431-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="2d431-109">探索整數運算</span><span class="sxs-lookup"><span data-stu-id="2d431-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: "<span data-ttu-id=\"2d431-110\">在互動式視窗中執行下列程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"2d431-111\">若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"2d431-112\">您看到的只是一種基本的整數數學運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"2d431-113\">`int` 型別代表**整數**，也就是正整數或負整數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"2d431-114\">您使用 `+` 符號來執行加法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"2d431-115\">整數常用的其他數學運算包括：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"2d431-116\">`-` 用於減法</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"2d431-117\">`*` 用於乘法</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"2d431-118\">`/` 用於除法</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"2d431-119\">您可於此整個快速入門中，修改在互動式視窗中撰寫的程式碼，藉以自行探索各項內容。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-119\">Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"2d431-120\">本快速入門在每個步驟都有供您嘗試的範例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-120\">This quick start provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"2d431-121\">讓我們開始探索這些不同的運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"2d431-122\">修改第三行來嘗試每種運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"2d431-123\">在每次編輯之後，按一下 [執行] 按鈕。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"2d431-124\">減法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"2d431-125\">乘法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"2d431-126\">除法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"2d431-127\">如果您想要的話，也可以試著在同一行中執行多個數學運算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"2d431-128\">在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"2d431-129\">**編譯器**會找出那些錯誤並回報給您。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"2d431-130\">當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"2d431-131\">該練習將有助於您了解 C# 程式碼的結構。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"2d431-132\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2d431-133\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="2d431-134">探索運算的順序</span><span class="sxs-lookup"><span data-stu-id="2d431-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="2d431-135">針對不同數學運算的優先順序，C# 語言所定義的規則與您在數學所學的規則一致。</span><span class="sxs-lookup"><span data-stu-id="2d431-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="2d431-136">乘法和除法的優先順序高於加法和減法。</span><span class="sxs-lookup"><span data-stu-id="2d431-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="2d431-137">請在互動式視窗中執行下列程式碼來探索上述優先順序：</span><span class="sxs-lookup"><span data-stu-id="2d431-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="2d431-138">輸出示範了程式會先執行乘法，然後再執行加法。</span><span class="sxs-lookup"><span data-stu-id="2d431-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="2d431-139">您可以在想要優先執行的一個或多個運算前後加上括號，以強制執行不同的運算順序：</span><span class="sxs-lookup"><span data-stu-id="2d431-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a  + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="2d431-140">結合許多不同的運算來深入探索。</span><span class="sxs-lookup"><span data-stu-id="2d431-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="2d431-141">將上面的第四行取代為如下的內容：</span><span class="sxs-lookup"><span data-stu-id="2d431-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="2d431-142">您可能已注意到整數某個有趣的行為。</span><span class="sxs-lookup"><span data-stu-id="2d431-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="2d431-143">整數的除法一律會產生整數結果，即使您認為結果應有小數或分數部分也一樣。</span><span class="sxs-lookup"><span data-stu-id="2d431-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="2d431-144">如果您還沒看過這種行為，請嘗試下列運算：</span><span class="sxs-lookup"><span data-stu-id="2d431-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="2d431-145">再次按一下 [執行] 來查看結果。</span><span class="sxs-lookup"><span data-stu-id="2d431-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="2d431-146">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="2d431-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="2d431-147">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="2d431-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="2d431-148">探索整數的精確度與限制</span><span class="sxs-lookup"><span data-stu-id="2d431-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="2d431-149">上一個範例示範了整數除法運算會將結果截斷。</span><span class="sxs-lookup"><span data-stu-id="2d431-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="2d431-150">您可以使用**模數**運算子 (`%` 字元) 來取得**餘數**：</span><span class="sxs-lookup"><span data-stu-id="2d431-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="2d431-151">C# 整數型別有一個地方與數學上的整數不同：`int` 型別有最小和最大限制。</span><span class="sxs-lookup"><span data-stu-id="2d431-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="2d431-152">請在互動式視窗中執行此程式碼來查看這些限制：</span><span class="sxs-lookup"><span data-stu-id="2d431-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="2d431-153">如果計算產生的值超出這些限制，就會發生**反向溢位**或**溢位**的情況。</span><span class="sxs-lookup"><span data-stu-id="2d431-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="2d431-154">答案看起來會是從其中一個限制回繞至另一個限制。</span><span class="sxs-lookup"><span data-stu-id="2d431-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="2d431-155">將這兩行程式碼加入互動式視窗來查看範例：</span><span class="sxs-lookup"><span data-stu-id="2d431-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="2d431-156">請注意，答案非常接近最小 (負) 整數。</span><span class="sxs-lookup"><span data-stu-id="2d431-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="2d431-157">這與 `min + 2` 相同。</span><span class="sxs-lookup"><span data-stu-id="2d431-157">It's the same as `min + 2`.</span></span> <span data-ttu-id="2d431-158">此加法運算已**溢出**整數允許的值。</span><span class="sxs-lookup"><span data-stu-id="2d431-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="2d431-159">此答案是非常大的負數，這是因為溢位會從最大整數值「回繞」至最小整數值。</span><span class="sxs-lookup"><span data-stu-id="2d431-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="2d431-160">當 `int` 型別不符合您的需求時，還有其他具有不同限制和精確度的數字型別可供使用。</span><span class="sxs-lookup"><span data-stu-id="2d431-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="2d431-161">我們會在下一篇探索那些數字型別。</span><span class="sxs-lookup"><span data-stu-id="2d431-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="2d431-162">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="2d431-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="2d431-163">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="2d431-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="2d431-164">使用 Double 型別</span><span class="sxs-lookup"><span data-stu-id="2d431-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"2d431-165\">`double` 數字型別代表雙精確度浮點數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"2d431-166\">您可能不熟悉這些字詞。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"2d431-167\">**浮點數**可用以代表非常大或非常小的非整數數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"2d431-168\">**雙精確度**表示這些數字使用比**單精確度**更高的精確度來儲存。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"2d431-169\">在現代的電腦上，比較常使用雙精確度而非單精確度數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"2d431-170\">讓我們開始探索吧。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-170\">Let's explore.</span></span> <span data-ttu-id=\"2d431-171\">在互動式視窗中嘗試下列程式碼並查看結果：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"2d431-172\">請注意答案包括商數的小數部分。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"2d431-173\">請嘗試略為複雜的雙精確度浮點數運算式：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"2d431-174\">雙精確度浮點數值的範圍遠大於整數值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"2d431-175\">在互動式視窗中嘗試下列程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"2d431-176\">這些值會以科學記號標記法呈現。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"2d431-177\">`E` 左邊的數字是有效數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"2d431-178\">右邊的數字則為指數，亦即 10 的次方。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"2d431-179\">就像數學上的小數數字，C# 中的雙精確度浮點數會發生捨入誤差。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"2d431-180\">請嘗試此程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"2d431-181\">如您所知，`0.3` 循環與 `1/3` 並不完全相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"2d431-182\">***挑戰***</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"2d431-183\">嘗試使用 `double` 型別搭配大型數字、小型數字、乘法和除法的其他計算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"2d431-184\">嘗試更複雜的計算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2d431-185\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2d431-186\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="2d431-187">使用固定點型別</span><span class="sxs-lookup"><span data-stu-id="2d431-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: "<span data-ttu-id=\"2d431-188\">您已經看過 C# 中的基本數字型別：整數和雙精確度浮點數。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"2d431-189\">還有一個您要了解的其他型別：`decimal` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"2d431-190\">`decimal` 類型的範圍較小，但精確度較 `double` 來得高。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"2d431-191\">**固定點**這個詞代表小數點 (或二進位點) 不會移動。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"2d431-192\">讓我們來看一下：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"2d431-193\">請注意該範圍小於 `double` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"2d431-194\">透過嘗試下列程式碼，您可以看到 decimal (小數) 型別有較高的精確度：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"2d431-195\">數字上的 `M` 尾碼乃是指示常數應使用 `decimal` 型別。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"2d431-196\">請注意，使用 decimal (小數) 型別的運算在小數點右邊會有更多的數字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"2d431-197\">***挑戰***</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"2d431-198\">您已經了解不同的數字型別，接著請撰寫程式碼，以計算半徑 2.50 公分的圓形面積。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id=\"2d431-199\">提醒您圓形面積是 PI 乘以半徑的平方。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"2d431-200\">提示：.NET 包含 PI 的常數：<xref:System.Math.PI?displayProperty=nameWithType>，可用來作為該值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-200\">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"2d431-201\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2d431-202\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n\n<span data-ttu-id=\"2d431-203\">您應該會取得介於 19 和 20 的答案。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-203\">You should get an answer between 19 and 20.</span></span>\n"
- title: <span data-ttu-id="2d431-204">完成挑戰</span><span class="sxs-lookup"><span data-stu-id="2d431-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="2d431-205">您是否有得到與下列程式碼類似的內容？</span><span class="sxs-lookup"><span data-stu-id="2d431-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="2d431-206">如果您想要的話，可以嘗試其他公式。</span><span class="sxs-lookup"><span data-stu-id="2d431-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="2d431-207">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="2d431-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="2d431-208">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="2d431-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"2d431-209\">您已經完成＜C# 中的數字＞快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-209\">You've completed the \"Numbers in C#\" quick start.</span></span> \n\n<span data-ttu-id=\"2d431-210\">您可以在自己的開發環境中繼續進行這些快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-210\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"2d431-211\">了解[本機開發](local-environment.md)的基本概念，然後選擇快速入門。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-211\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"2d431-212\">您可以嘗試這個相同的練習、直接移至下一個快速入門，或從 [C# 中的數字](numbers-in-csharp-local.md)快速入門重新開始。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-212\">You can try this same exercise, move directly to the next quick start, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"2d431-213\">您可以在下列主題中深入了解 C# 中的數字：</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-213\">You can learn more about numbers in C# in the following topics:</span></span>\n\n<span data-ttu-id=\"2d431-214\">[整數類型表](../language-reference/keywords/integral-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-214\">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  \n<span data-ttu-id=\"2d431-215\">[浮點類型表](../language-reference/keywords/floating-point-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-215\">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  \n<span data-ttu-id=\"2d431-216\">[內建類型表](../language-reference/keywords/built-in-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-216\">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  \n<span data-ttu-id=\"2d431-217\">[隱含數值轉換表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-217\">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  \n[<span data-ttu-id=\"2d431-218\">明確數值轉換表</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d431-218\">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)"
