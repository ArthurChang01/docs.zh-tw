### YamlMime:YamlDocument
documentType: Tutorial
title: 'Hello C#'
metadata:
  title: 'Hello C#。 您的第一個 C# 語言簡介。'
  description: '在本教學課程中，您將使用瀏覽器以互動方式學習 C#。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。'
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: 'Numbers in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      本教學課程會以互動方式讓您使用瀏覽器撰寫 C#，並查看編譯及執行程式碼的結果，藉此了解 C#。 它包含開頭為 "Hello World" 程式的一系列課程。 這些課程會教導您 C# 語言的基本概念。
  - title: '執行您的第一個 C# 程式'
    durationInMinutes: 2
    content: |
      在互動式視窗中執行下列程式碼。 若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：

      ```csharp
      Console.WriteLine("Hello World!");
      ```

      恭喜您！ 您已執行您的第一個 C# 程式。 這是一個會列印 "Hello World!" 訊息的簡單程式。 它會使用 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法來列印該訊息。 `Console` 是代表主控台視窗的型別。 `WriteLine` 是 `Console` 型別的方法，會將文字行列印至文字主控台。

      讓我們繼續探索。 本課程的其餘部分會探索使用 `string` 型別，它代表 C# 中的文字。 就像 `Console` 型別，`string` 型別也具有方法。 `string` 方法可以處理文字。 

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - title: 宣告和使用變數
    durationInMinutes: 3
    content: |
      您的第一個程式會在螢幕上列印 `string` "Hello World!" 。 

      > [!TIP]
      > 在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。 **編譯器**會找出那些錯誤並回報給您。 當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。
      > 該練習將有助於您了解 C# 程式碼的結構。 

      您的第一個程式僅能列印一則訊息。 您可以使用**變數**來撰寫更有用的程式。 **變數**是一種符號，可以使用不同的值來執行相同的程式碼。 讓我們來試試看吧！ 使用下列程式碼取代您在互動式視窗中所撰寫的程式碼：

      ```csharp
      string aFriend = "Bill";
      Console.WriteLine(aFriend);
      ```

      第一行會宣告一個變數 `aFriend`，並為其指派一個值 "Bill"。 第二行會列印出名稱。

      您可以將不同的值指派給任何您宣告的變數。 您可以將名稱變更為您的任何一位朋友。 在互動式視窗中，在您已新增的程式碼之後加入這兩行：

      ```csharp
      aFriend = "Maria";
      Console.WriteLine(aFriend);
      ```

      請注意，同一行程式碼會根據儲存在 `aFriend` 變數中的值，列印兩個不同的訊息。

      您可能也注意到，最後兩個訊息中遺漏 "Hello" 這個字。 讓我們來修正。  將列印訊息的程式碼行修改為下列內容：

      ```csharp
      Console.WriteLine("Hello " + aFriend);
      ```

      再次按一下 [執行] 來查看結果。

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - title: 處理字串
    durationInMinutes: 5
    content: |
      您上次的編輯是字串處理功能的初探。 讓我們來探索更多內容。

      `+` 在 C# 中稱為運算子。 使用像 `firstString + secondString` 這樣的方式套用至字串時，會建立一個新的字串，其中包含第一行的文字，後面接著第二行的文字。 如此稱為「字串串連」。 您可以結合任何數目的字串，包括字串變數。  試試這個：

      ```csharp
      string firstFriend = "Maria";
      string secondFriend = "Sage";
      Console.WriteLine("My friends are " + firstFriend + " and " + secondFriend);
      ```

      當您探索更多字串處理功能時，可以使用 `Length` 來找出字串長度。 `Length` 是字串的**屬性**，會傳回該字串的字元數。 在互動式視窗底端加入下列程式碼：

      ```csharp
      Console.WriteLine("The name " + firstFriend + " has " + firstFriend.Length + " letters.");
      Console.WriteLine("The name " + secondFriend + " has " + secondFriend.Length + " letters.");
      ```

      > [!TIP]
      > 這是您自行探索的好時機。 您已學到 `Console.WriteLine()` 將文字寫至螢幕。 您已學到如何宣告變數，以及將字串串連在一起。 在互動式視窗中實驗。 自行撰寫更多訊息。 使用 `+` 運算子建立字串。

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - title: 使用字串完成更多工作
    durationInMinutes: 5
    content: |
      您一直在使用 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> **方法**來列印訊息。 **方法**是實作某些動作的程式碼區塊。 它具有名稱，以便於您可以存取。 

      `string` 型別具有許多有用的方法。 讓我們來探索 <xref:System.String.Trim%2A> 方法以及相關的 <xref:System.String.TrimStart%2A> 和 <xref:System.String.TrimEnd%2A> 方法。 這些方法會移除前置或尾端空格：

      ```csharp
      string message = "      Hello World!       ";
      Console.WriteLine("[" + message + "]");

      string trimmedMessage = message.TrimStart();
      Console.WriteLine("[" + trimmedMessage + "]");

      trimmedMessage = message.TrimEnd();
      Console.WriteLine("[" + trimmedMessage + "]");

      trimmedMessage = message.Trim();
      Console.WriteLine("[" + trimmedMessage + "]");
      ```

      此範例強調了處理字串的幾個重要概念。 操作字串的方法會傳回新字串物件，而不是就地修改。 您可以看到，每次呼叫 `Trim` 方法時都會傳回新字串，但不會變更原始訊息。

      還有其他方法可以用來處理字串。 例如，您在編輯器或文字處理器中應該用過搜尋和取代命令。 <xref:System.String.Replace%2A> 方法會在 `string` 中執行類似的操作。 它會搜尋子字串，並以不同的文字來取代。 <xref:System.String.Replace%2A> 方法會接受兩個**參數**。 參數就是括號之間的字串。 第一個字串是要搜尋的文字。 第二個字串是用來取代的文字。 試試看吧。 新增下列程式碼：

      ```csharp
      string message = "Hello World!";
      Console.WriteLine(message);
      message = message.Replace("Hello", "Greetings");
      Console.WriteLine(message);
      ```

      另外兩個有用的方法可以使字串全部大寫或全部小寫。 試試下列程式碼：

      ```csharp
      string message = "Hello World!";
      Console.WriteLine(message);
      Console.WriteLine(message.ToUpper());
      Console.WriteLine(message.ToLower());
      ```

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - title: 搜尋字串
    durationInMinutes: 10
    content: |
      搜尋和取代作業的另一部分就是在字串中尋找文字。 您可以使用 <xref:System.String.Contains%2A> 方法進行搜尋。 它會告訴您字串是否包含某個子字串。 請嘗試下列程式碼來探索 <xref:System.String.Contains%2A>：

      ```csharp
      string message = "You say goodbye, and I say hello";
      Console.WriteLine(message.Contains("goodbye"));
      Console.WriteLine(message.Contains("greetings"));
      ```

      <xref:System.String.Contains%2A> 方法會傳回一個**布林**值，告訴您是否已找到您要搜尋的字串。 **布林值**會儲存 `true` 或 `false` 值。 您將在稍後的課程中深入了解**布林值**。

      ***挑戰***

      還有兩個類似的 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A> 方法，也可以搜尋字串中的子字串。 這兩個方法會在字串的開頭或結尾尋找子字串。 嘗試修改先前的範例，以使用 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A>，而不是 <xref:System.String.Contains%2A>。 在字串的開頭搜尋 "You" 或 "goodbye"。 在字串的結尾搜尋 "You" 或 "goodbye"。

      > [!Note]
      > 當您測試字串結尾的文字時，請注意標點符號。 如果字串是以句號結尾，則檢查的字串也必須以句號結尾。

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - title: 完成挑戰
    durationInMinutes: 3
    content: |
      您是否有得到與下列程式碼類似的內容？

      ```csharp
      string message = "You say goodbye, and I say hello";
      Console.WriteLine(message.StartsWith("You"));
      Console.WriteLine(message.StartsWith("goodbye"));

      Console.WriteLine(message.EndsWith("hello"));
      Console.WriteLine(message.EndsWith("goodbye"));
      ```

      > [!NOTE]
      > 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。
  - content: |
      您已經完成 "Hello C#" 教學課程。

      有關處理 `string` 型別，您可以在 [C# 程式設計手冊](../programming-guide/index.md)的[字串](../programming-guide/strings/index.md)主題中深入了解。