### YamlMime:Tutorial
title: <span data-ttu-id="91f4a-101">使用字串插補來建構格式化的字串</span><span class="sxs-lookup"><span data-stu-id="91f4a-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: 字串插補 - C# 互動式教學課程
  description: 在本教學課程中，您使用瀏覽器，以互動方式探索 C# 字串插補功能。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: eb4b1571b4d00d90034148f7b595f4499859ce4b
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850954"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="91f4a-105">此教學課程將教您如何使用[字串插補](../../language-reference/tokens/interpolated.md)在單一字串中插入值。</span><span class="sxs-lookup"><span data-stu-id="91f4a-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="91f4a-106">您也會了解如何控制結果字串的文字格式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="91f4a-107">您使用瀏覽器撰寫並執行 C# 程式碼，而且可以立即查看結果。</span><span class="sxs-lookup"><span data-stu-id="91f4a-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="91f4a-108">建立插入字串</span><span class="sxs-lookup"><span data-stu-id="91f4a-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="91f4a-109">在互動式視窗中執行下列程式碼。</span><span class="sxs-lookup"><span data-stu-id="91f4a-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="91f4a-110">若要這樣做，請在互動式視窗中鍵入程式碼 (將 `<name>`取代為您的名稱)，然後選取 [執行]：</span><span class="sxs-lookup"><span data-stu-id="91f4a-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="91f4a-111">當您執行程式時，[輸出] 會顯示問候語中包含您名稱的字串。</span><span class="sxs-lookup"><span data-stu-id="91f4a-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="91f4a-112"><xref:System.Console.WriteLine%2A> 方法呼叫的字串引數是「插入字串運算式」。</span><span class="sxs-lookup"><span data-stu-id="91f4a-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="91f4a-113">它是一種範本，可讓您從包含內嵌程式碼的字串建構單一字串 (稱為「結果字串」)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="91f4a-114">插入字串運算式特別適用於將值插入至字串或將數個字串串連 (聯結在一起)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="91f4a-115">上面的範例包含每個插入字串運算式都必須要有的兩個項目：</span><span class="sxs-lookup"><span data-stu-id="91f4a-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="91f4a-116">左引號字元之前開頭為 `$` 字元的字串常值。</span><span class="sxs-lookup"><span data-stu-id="91f4a-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="91f4a-117">`$` 符號與引號字元之間不能有任何空格。</span><span class="sxs-lookup"><span data-stu-id="91f4a-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="91f4a-118">(如果您想要查看包含空格時會發生什麼情況，請在互動式視窗中於 `$` 字元後面插入空格，然後執行已更新的程式碼。</span><span class="sxs-lookup"><span data-stu-id="91f4a-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="91f4a-119">C# 編譯器抱怨「未預期的字元 '$'」)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="91f4a-120">一或多個「插入運算式」。</span><span class="sxs-lookup"><span data-stu-id="91f4a-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="91f4a-121">插入運算式是以左右大括弧 (`{` 和 `}`) 指出。</span><span class="sxs-lookup"><span data-stu-id="91f4a-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="91f4a-122">您可以放置任何 C# 運算式，以傳回大括號內的值 (包含 `null`)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="91f4a-123">嘗試更多包含一些其他資料類型的字串插補範例。</span><span class="sxs-lookup"><span data-stu-id="91f4a-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="91f4a-124">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91f4a-125">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="91f4a-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="91f4a-126">包含不同的資料類型</span><span class="sxs-lookup"><span data-stu-id="91f4a-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"91f4a-127\">在前一個步驟中，您使用字串插補將某個字串插入至另一個字串內部。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"91f4a-128\">不過，每個屬於插入字串運算式的插入運算式都可以是任意資料類型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"91f4a-129\">請包含插入字串運算式中各種資料類型的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"91f4a-130\">在下列範例中，我們先定義具有 `Name`、`Price` 與 `perPackage` 成員的 [tuple](../../tuples.md)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"91f4a-131\">在互動式視窗中執行下列程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"91f4a-132\">請注意，插入字串中的插入運算式 `item.Price` 會解析為結果字串中的文字 \"1.99\"。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"91f4a-133\">原因是，運算式結果的型別不是字串時，會使用下列方式將結果解析為字串：</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"91f4a-134\">如果插入運算式評估為 `null`，則會使用空字串 (\"\"，或 <xref:System.String.Empty?displayProperty=nameWithType>)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"91f4a-135\">如果插入運算式未評估為 `null`，一般會呼叫結果運算式的 `ToString` 方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"91f4a-136\">在此範例的輸出中，日期太過精確 (eggplant 價格不會因第二個而變更)，而價格值未指出貨幣單位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"91f4a-137\">在下一個步驟中，您將學習如何控制運算式結果的字串表示格式來修正這些問題。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"91f4a-138\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"91f4a-139\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"91f4a-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="91f4a-140">控制插入運算式的格式</span><span class="sxs-lookup"><span data-stu-id="91f4a-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="91f4a-141">在上一個步驟中，已將兩個格式不佳的字串插入至結果字串。</span><span class="sxs-lookup"><span data-stu-id="91f4a-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="91f4a-142">其中一個是只有日期才適合的日期和時間值。</span><span class="sxs-lookup"><span data-stu-id="91f4a-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="91f4a-143">第二個是未指出其貨幣單位的價格。</span><span class="sxs-lookup"><span data-stu-id="91f4a-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="91f4a-144">這兩個問題都很容易解決。</span><span class="sxs-lookup"><span data-stu-id="91f4a-144">Both issues are easy to address.</span></span> <span data-ttu-id="91f4a-145">字串插補可讓您指定「格式字串」，以控制特定類型的格式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="91f4a-146">修改前一個範例中的 `Console.WriteLine` 呼叫，使其包含日期和價格運算式的格式字串，如下行所示：</span><span class="sxs-lookup"><span data-stu-id="91f4a-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="91f4a-147">在插入運算式後面接著冒號 (":") 和格式字串，即可指定格式字串。</span><span class="sxs-lookup"><span data-stu-id="91f4a-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="91f4a-148">"d" 是[標準日期和時間格式字串](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，可呈現簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="91f4a-149">"C2" 是[標準數值格式字串](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，可將數字呈現為小數點後面有兩位數的貨幣值。</span><span class="sxs-lookup"><span data-stu-id="91f4a-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="91f4a-150">.NET 程式庫中有多種類型都支援一組預先定義的格式字串。</span><span class="sxs-lookup"><span data-stu-id="91f4a-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="91f4a-151">其中包含所有數值類型以及日期和時間類型。</span><span class="sxs-lookup"><span data-stu-id="91f4a-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="91f4a-152">如需支援格式字串之類型的完整清單，請參閱[在 .NET 中格式化類型](../../../standard/base-types/formatting-types.md)一文中的[格式字串和 .NET 類別庫類型](../../../standard/base-types/formatting-types.md#stringRef)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="91f4a-153">嘗試修改範例中的格式字串，以查看它們對日期和時間以及數值格式的影響。</span><span class="sxs-lookup"><span data-stu-id="91f4a-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="91f4a-154">將 `{date:d}` 中的 "d" 變更為 "t" (顯示簡短時間格式)、"y" (顯示年份和月份) 以及 "yyyy" (將年份顯示為四位數)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="91f4a-155">將 `{price:C2}` 中的 "C2" 變更為 "e" (適用於指數標記法) 和 "F3" (適用於小數點後面有三位數的數值)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="91f4a-156">除了控制格式之外，您也可以控制結果字串中所含格式化字串的欄位寬度和對齊方式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="91f4a-157">在下一步，您將學習如何執行這項作業。</span><span class="sxs-lookup"><span data-stu-id="91f4a-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="91f4a-158">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91f4a-159">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="91f4a-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="91f4a-160">控制插入運算式的欄位寬度和對齊方式</span><span class="sxs-lookup"><span data-stu-id="91f4a-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="91f4a-161">一般情況下，插入字串運算式的結果格式化為字串時，結果字串中會包含該字串，而且沒有前置或尾端空格。</span><span class="sxs-lookup"><span data-stu-id="91f4a-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="91f4a-162">特別是當您使用一組資料時，可控制欄位寬度和文字對齊方式有助於產生更容易讀取的輸出。</span><span class="sxs-lookup"><span data-stu-id="91f4a-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="91f4a-163">若要查看此結果，請執行下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="91f4a-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="91f4a-164">項目名稱會靠左對齊，而其數量會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="91f4a-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="91f4a-165">在插入運算式後面加上逗號 (",")，並指定「最小」欄位寬度，即可指定對齊方式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="91f4a-166">如果指定的值是正數，則欄位會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="91f4a-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="91f4a-167">如果它是負數，則欄位會靠左對齊。</span><span class="sxs-lookup"><span data-stu-id="91f4a-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="91f4a-168">嘗試移除 `{"Item",-25}` 和 `{item.Key,-25}` 程式碼中的負號，然後重新執行此範例。</span><span class="sxs-lookup"><span data-stu-id="91f4a-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="91f4a-169">目前，項目名稱會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="91f4a-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="91f4a-170">您可以將對齊規範與格式字串結合為單一插入運算式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="91f4a-171">若要這樣做，請先指定對齊方式，而且後面接著冒號和格式字串。</span><span class="sxs-lookup"><span data-stu-id="91f4a-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="91f4a-172">嘗試下列程式碼，以顯示含有所定義欄位寬度的三個格式化字串：</span><span class="sxs-lookup"><span data-stu-id="91f4a-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="91f4a-173">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="91f4a-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91f4a-174">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="91f4a-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="91f4a-175">您已完成字串內插補點互動式教學課程。</span><span class="sxs-lookup"><span data-stu-id="91f4a-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="91f4a-176">您可以按一下以下的 **C# 中的集合**連結來啟動下一個互動式教學課程，或者您可以瀏覽 [.NET 網站](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) \(英文\) 以下載 .NET Core SDK、在您的機器上建立專案，並繼續撰寫程式碼。</span><span class="sxs-lookup"><span data-stu-id="91f4a-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="91f4a-177">「後續步驟」一節會帶您回到這些教學課程。</span><span class="sxs-lookup"><span data-stu-id="91f4a-177">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="91f4a-178">如需詳細資訊，請參閱[字串內插補點](../../language-reference/tokens/interpolated.md)。</span><span class="sxs-lookup"><span data-stu-id="91f4a-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
