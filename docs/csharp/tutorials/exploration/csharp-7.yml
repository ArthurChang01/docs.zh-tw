### YamlMime:Tutorial
title: 探索 C# 7.0 - C# 互動式教學課程
metadata:
  title: 探索 C# 7.0 - 使用瀏覽器以互動方式嘗試 C# 7.0 的新功能
  description: 在本教學課程中，您將使用瀏覽器以互動方式探索 C# 7.0。 您將探索可與 C# 7.0 搭配使用的新慣用語，讓程式碼更精確且更容易閱讀。
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7cec35e0749ea0b38162244171459f311d27cb25
  ms.sourcegitcommit: a8d3504f0eae1a40bda2b06bd441ba01f1631ef0
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 06/18/2019
  ms.locfileid: "67170229"
items:
- durationInMinutes: 1
  content: >
    本教學課程讓您以互動方式探索 C# 7.0 功能，您將使用瀏覽器來撰寫 C#，並查看編譯和執行程式碼的結果。 它包含一系列課程，修改了先前 C# 實作以使用更新且更精確的 C# 7.0 功能。 本文的其餘部分將概述每項功能，並提供連結以探索每項功能。
- title: 指派位置的 Out 變數宣告
  durationInMinutes: 2
  content: "在這個版本中，支援 `out` 參數的現有語法已經過改善。 按一下本頁底部的 [進入焦點模式] 按鈕，然後在互動式視窗中嘗試下列程式碼： \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\n您現在可以在方法呼叫的引數清單中宣告 `out` 變數，而不是撰寫個別的宣告陳述式。 您可以將宣告移至方法呼叫中。 在互動式視窗底部加入下列程式碼：\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\n您可以將 `int` 宣告變更為 `var` 宣告。 在互動式視窗中加入下列程式碼：\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n與現有的語法相比，新的語法提供了兩個重要優勢：\n\n* 程式碼更容易閱讀與理解。 \n    - 您在使用之處宣告 out 變數，而不是在上方另一行。\n* 不需要指派初始值。\n    - 藉由在方法呼叫中使用之處宣告 `out` 變數，就無法在指派它之前意外使用它。\n\n宣告的變數範圍是封入 `if` 陳述式的範圍。 這可讓您在之後使用變數。 修改最後一個 `if` 區塊，如下列程式碼片段所示。\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: Tuple 可建立輕量級的資料結構
  durationInMinutes: 1
  content: "Tuple 是輕量的資料結構，其中包含多個欄位來代表資料成員。 這些欄位不會經過驗證，且您無法定義自己的方法。\n\n> [!NOTE]\n> Tuple 在 C# 7.0 之前即可使用，但效率不彰且沒有語言支援。 這表示元組元素只能參考為 `Item1`及 `Item2` 等等。 C# 7.0 加入了 Tuple 的語言支援，讓 Tuple 欄位的語意名稱能使用全新且更具效率的 Tuple 型別。\n\n您可以為每個具名成員指派一個值，以建立 Tuple：\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\n`namedLetters` Tuple 包含稱為 `Alpha` 和 `Beta` 的欄位。 這些名稱只會在編譯時間存在而且在執行階段不會保留 (例如使用反映調查 Tuple 時)。\n\n在 Tuple 指派中，您也可以在指派的右邊，指定欄位的名稱︰ \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\n您可以在指定指派左側及右側的欄位名稱，但是右側的名稱會遭到忽略。\n\nTuple 最適合用作 `private` 和 `internal` 方法的傳回型別。 Tuple 提供簡單的語法，可讓方法傳回多個離散值。\n\n建立 Tuple 比建立類別或結構更有效率且更具生產力。 它是一個更簡單的輕量語法，可定義攜帶多個值的資料結構。 下列範例方法會傳回在整數序列中找到的最小和最大值。 在瀏覽器中加入下列程式碼以嘗試它：\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\n有時候您可能會想要解除封裝已從方法傳回的 Tuple 成員。  您可以藉由為 Tuple 中的每個值宣告不同變數來這麼做。 這稱為*解構* Tuple。 在瀏覽器中加入下列程式碼以嘗試它：\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\n當您使用 Tuple 時，您會經常發現您沒有使用 Tuple 結果的所有成員。 發生這種情況時，您可以使用 `_` 取代變數，以捨棄一或多個傳回的值。 在瀏覽器中加入下列程式碼以嘗試它：\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\n您可以在 [Tuple 文章](../../tuples.md)中深入了解 Tuple。\n您可以在[捨棄文章](../../discards.md)中深入了解捨棄。\n"
- title: 使用型別模式搭配運算式
  durationInMinutes: 2
  content: >
    `is` 模式運算式會擴充熟悉的 [`is` 運算子](../../language-reference/keywords/is.md#pattern-matching-with-is)，來查詢其類型之外的物件。


    在瀏覽器視窗中嘗試下列程式碼：


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    改為將變數宣告變更為字串：


    ```csharp

    object count = "5";

    ```


    現在，`is` 運算式為 False，因此會執行 `else` 分支。 嘗試在 else 分支中，將 `count` 變更為 `number`：


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    上述不會編譯，因為在 `else` 分支中未指派 `number`。 它只會在 `if` 陳述式的 `true` 分支中指派。


    當您有少數的型別要測試時，`is` 運算式型別模式相當有用。 通常，您可能需要測試多個型別。 這需要模式比對 `switch` 陳述式。
- title: switch 陳述式中的模式比對
  durationInMinutes: 2
  content: >
    「比對運算式」的語法很熟悉，是根據已屬於 C# 語言一部分的 `switch` 陳述式。 根據您在上一頁探索的 `is` 運算式，讓我們從小型範例開始：


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    上述程式碼會檢查 `int` 或 `null`。 其他每個型別都已達到預設的情況。 加入下列兩行，以驗證其行為：


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    `switch` 運算式會將可為 Null 的型別轉換成其對應的型別。 加入下列以驗證：


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    您可以將任意數目的其他型別模式運算式加入至 switch 陳述式。 在 `null` 案例之前加入這些運算式：


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    新增下列測試以確定這些運算式正常運作：


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    比對運算式也支援常數。 如此可以節省時間，因為已隔離簡單的案例︰


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    您必須在 `case int:` 運算式*之前*加入上述案例。 如果您在該案例之後加入它，編譯器會警告您，它已經過上一個案例處理。


    您可以將 `when` 子句加入至任何模式案例，讓您可以測試型別或常數值以外的其他條件。 在一般 `string` 案例上方加入下列案例來嘗試它：


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    使用類似下列程式碼的內容來測試它：


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    模式比對運算式的新語法可讓您根據物件的型別或其他屬性，使用清楚且簡潔的語法，更輕鬆地建立分派演算法。 模式比對運算式可讓在繼承方面不相關的資料類型上啟用這些建構。


    您可以在 [C# 中的模式比對](../../pattern-matching.md)專門文章中深入了解模式比對。
- title: 使用 ref 區域變數和傳回，最佳化記憶體儲存空間
  durationInMinutes: 2
  content: >
    這項功能可以啟用使用和傳回在其他地方定義之變數參考的演算法。 其中一個範例是使用大型矩陣，並尋找具有特定特性的單一位置。 一種方法會將兩個索引傳回矩陣中的單一位置︰


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    您可以使用下列程式碼測試此方法：


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    這個 `Find` 方法會將索引傳回到矩陣中的項目。 那會導致呼叫端撰寫可使用那些索引對矩陣進行取值，並修改單一項目的程式碼。 相反地，您可以撰寫方法，傳回對您想要變更之矩陣項目的「參考」。


    讓我們逐步解說一系列的變更，以展示 ref 區域功能，並示範如何建立傳回對內部儲存體之參考的方法。 在過程中，您將了解 ref 傳回和 ref 區域功能的規則，這些規則可防止您不小心誤用。


    一開始先修改 `Find` 方法宣告，讓它傳回 `ref int` 而不是 Tuple。


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    修改傳回陳述式以傳回正確索引處的項目：


    ```csharp

    return matrix[i,j];

    ```


    將最終傳回變更為擲回例外狀況：


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    請注意，這不會編譯。 方法宣告表示 `ref` 傳回，但是 return 陳述式會指定值傳回。 您必須將 `ref` 關鍵字加入至每個 return 陳述式。 那表示是以傳址方式傳回，並可協助稍後閱讀程式碼的開發人員記得該方法會以傳址方式傳回︰


    ```csharp

    return ref matrix[i,j];

    ```


    既然方法會傳回矩陣中整數值的參考，您需要修改呼叫它的位置。 `var` 宣告表示 `valItem` 現在是 `int`，而不是 Tuple。 將呼叫程式碼變更為下列內容：


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    在上述範例中的第二個 `WriteLine` 陳述式會列印出值 `42`，而非 `24`。 變數 `valItem` 是 `int`，而非 `ref int`。 `var` 關鍵字可讓編譯器指定型別，但不會隱含地加入 `ref` 修飾詞。 相反地，`ref return` 所指的值會「複製」到指派左手邊的變數。 變數不是 `ref` 區域變數。


    若要修改傳回的參考，您需要將 `ref` 修飾詞加入至區域變數宣告，並在呼叫 `Find` 之前，如果傳回值是參考，讓變數成為參考。 修改瀏覽器中的測試程式碼以符合下列內容：


    [!code-csharp[TestByRef](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByRef "test code for return object by reference")]


    現在，在上述範例中的第二個 `WriteLine` 陳述式會印出值 `24`，表示已修改矩陣中的儲存體。 區域變數已使用 `ref` 修飾詞宣告，而且它需要 `ref` 傳回。 您必須在宣告 `ref` 變數時先初始化；您無法分割宣告和初始化。


    C# 語言有三個其他的規則可保護您免於濫用 `ref` 區域變數和傳回值︰


    * 您無法將標準方法傳回值指派到 `ref` 區域變數。

    * 您不能傳回 `ref` 給變數，而該變數存留期不超過方法的執行。

    * `ref` 區域變數及傳回值無法配合非同步方法使用。


    新增 ref 區域變數和 ref 傳回能啟用更有效率的演算法，方法是，避免複製值，或是多次執行取值作業。


    如需詳細資訊，請參閱 [ref 關鍵字](../../language-reference/keywords/ref.md)一文。
- title: 使用區域函式將程式碼的存取減至最少
  durationInMinutes: 2
  content: "您現在可以宣告嵌入在其他函式內的區域函式。 這可讓您將這些函式的可見度降至最低。 區域函式有三個明顯的使用案例：\n\n- 遞迴函式\n- Iterator 方法。\n- Asynchronous 方法。\n\n讓我們從遞迴方法開始。 在瀏覽器中嘗試下列程式碼來計算 `6!` (階乘)：\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\n區域函式是實作遞迴演算法的絕佳方式。 其他常見的用法是供公用的 iterator 方法和公用的 async 方法使用。 這兩種方法都會產生程式碼，比程式設計人員想像更晚才報告錯誤。 在 Iterator 方法的情況下，任何例外狀況只會在呼叫列舉傳回序列的程式碼時觀察到。 若是非同步方法，任何例外狀況只會在傳回的 `Task` 等候時觀察到。\n\nIterator 方法比較容易在瀏覽器中探索，因此，讓我們在這次探索中使用這些 Iterator 方法。 嘗試在瀏覽器中呼叫 iterator 方法的下列程式碼：\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\n執行程式碼。 請注意，程式碼開始重複第二個結果集時，會擲回例外狀況。 重複第一個結果集的程式碼已執行。 此範例很小且不會變更任何資料結構，因此無害且易於修正。 但在較大的程式中，兩個迭代器物件可能會在不同的子方法中建立，因此可能很難找到根本原因。 如果第一個 iterator 方法變更了資料狀態，它甚至可能會造成資料損毀。 您會比較希望在任何工作完成之前，立即擲回例外狀況。 您可以重構程式碼，讓公用方法驗證所有引數，且讓區域函式執行列舉：\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\n上述的版本已闡明區域方法只會在外部方法的內容中參考。 區域函式的規則也確保開發人員無法意外從類別中的另一個位置呼叫區域函式，並略過引數的驗證。\n\n相同的技巧也可以運用在 `async` 方法，以確保在非同步工作開始之前，會擲回引數驗證所引發的例外狀況。\n\n> [!NOTE]\n> 區域函式支援的部分設計也可以使用「Lambda 運算式」完成。 有興趣的人可以[進一步了解差異](../../local-functions-vs-lambdas.md)。\n"
- content: 您已完成探索 C# 7 的主要新功能。 現在，請在您的應用程式中自行嘗試。 您可以在 [C# 7 的新功能](../../whats-new/csharp-7.md)一文中看到完整清單。
