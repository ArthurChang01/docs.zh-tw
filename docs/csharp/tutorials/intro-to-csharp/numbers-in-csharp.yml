### YamlMime:Tutorial
title: <span data-ttu-id="3dcaf-101">在 C# 中操作整數和浮點數數字</span><span class="sxs-lookup"><span data-stu-id="3dcaf-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: C# 中的數字 - C# 互動式教學課程簡介
  description: 在本教學課程中，您將使用瀏覽器以互動方式學習有關 C# 的數字型別。 您將要撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="3dcaf-105">C# 中的分支與迴圈</span><span class="sxs-lookup"><span data-stu-id="3dcaf-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7122bda62465482340ebdd2b1dc37577de9a0e69
  ms.sourcegitcommit: d6e27023aeaffc4b5a3cb4b88685018d6284ada4
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 07/09/2019
  ms.locfileid: "67661010"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="3dcaf-106">此教學課程會以互動方式讓您使用瀏覽器撰寫 C#，並查看編譯及執行程式碼的結果，以了解 C# 中有關數字型別的資訊。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="3dcaf-107">內容包含一系列探索 C# 中數字和數學運算的課程。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="3dcaf-108">這些課程會教導您 C# 語言的基本概念。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="3dcaf-109">探索整數運算</span><span class="sxs-lookup"><span data-stu-id="3dcaf-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="3dcaf-110">在互動式視窗中執行下列程式碼。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="3dcaf-111">若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    <span data-ttu-id="3dcaf-112">您看到的只是一種基本的整數數學運算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-112">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="3dcaf-113">`int` 型別代表**整數**，也就是正整數或負整數。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-113">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="3dcaf-114">您使用 `+` 符號來執行加法。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-114">You use the `+` symbol for addition.</span></span> <span data-ttu-id="3dcaf-115">整數常用的其他數學運算包括：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-115">Other common mathematical operations for integers include:</span></span>


    - <span data-ttu-id="3dcaf-116">`-` 用於減法</span><span class="sxs-lookup"><span data-stu-id="3dcaf-116">`-` for subtraction</span></span>

    - <span data-ttu-id="3dcaf-117">`*` 用於乘法</span><span class="sxs-lookup"><span data-stu-id="3dcaf-117">`*` for multiplication</span></span>

    - <span data-ttu-id="3dcaf-118">`/` 用於除法</span><span class="sxs-lookup"><span data-stu-id="3dcaf-118">`/` for division</span></span>


    > [!TIP]

    > <span data-ttu-id="3dcaf-119">在整個互動式教學課程中，您可以修改在互動式視窗中撰寫的程式碼，以自行探索各種變化。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-119">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="3dcaf-120">本教學課程在每個步驟都有供您嘗試的範例。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-120">This tutorial provides examples that you can try at each step.</span></span>


    <span data-ttu-id="3dcaf-121">讓我們開始探索這些不同的運算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-121">Start by exploring those different operations.</span></span> <span data-ttu-id="3dcaf-122">修改第三行來嘗試每種運算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-122">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="3dcaf-123">在每次編輯之後，按一下 [執行] 按鈕。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-123">After each edit, click the **Run** button.</span></span>


    <span data-ttu-id="3dcaf-124">減法：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-124">Subtraction:</span></span>


    ```csharp

    int c = a - b;

    ```


    <span data-ttu-id="3dcaf-125">乘法：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-125">Multiplication:</span></span>


    ```csharp

    int c = a * b;

    ```


    <span data-ttu-id="3dcaf-126">除法：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-126">Division:</span></span>


    ```csharp

    int c = a / b;

    ```


    <span data-ttu-id="3dcaf-127">如果您想要的話，也可以試著在同一行中執行多個數學運算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-127">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>


    > [!TIP]

    > <span data-ttu-id="3dcaf-128">在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-128">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="3dcaf-129">**編譯器**會找出那些錯誤並回報給您。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-129">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="3dcaf-130">當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-130">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="3dcaf-131">該練習將有助於您了解 C# 程式碼的結構。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-131">That exercise will help you learn the structure of C# code.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-132">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-132">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-133">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-133">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3dcaf-134">探索運算的順序</span><span class="sxs-lookup"><span data-stu-id="3dcaf-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="3dcaf-135">針對不同數學運算的優先順序，C# 語言所定義的規則與您在數學所學的規則一致。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="3dcaf-136">乘法和除法的優先順序高於加法和減法。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="3dcaf-137">請在互動式視窗中執行下列程式碼來探索上述優先順序：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="3dcaf-138">輸出示範了程式會先執行乘法，然後再執行加法。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="3dcaf-139">您可以在想要優先執行的一個或多個運算前後加上括號，以強制執行不同的運算順序：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="3dcaf-140">結合許多不同的運算來深入探索。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="3dcaf-141">將上面的第四行取代為如下的內容：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="3dcaf-142">您可能已注意到整數某個有趣的行為。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="3dcaf-143">整數的除法一律會產生整數結果，即使您認為結果應有小數或分數部分也一樣。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="3dcaf-144">如果您還沒看過這種行為，請嘗試下列運算：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="3dcaf-145">再次按一下 [執行] 來查看結果。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-146">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-147">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3dcaf-148">探索整數的精確度與限制</span><span class="sxs-lookup"><span data-stu-id="3dcaf-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="3dcaf-149">上一個範例示範了整數除法運算會將結果截斷。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="3dcaf-150">您可以使用**模數**運算子 (`%` 字元) 來取得**餘數**：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="3dcaf-151">C# 整數型別有一個地方與數學上的整數不同：`int` 型別有最小和最大限制。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="3dcaf-152">請在互動式視窗中執行此程式碼來查看這些限制：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="3dcaf-153">如果計算產生的值超出這些限制，就會發生**反向溢位**或**溢位**的情況。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="3dcaf-154">答案看起來會是從其中一個限制回繞至另一個限制。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="3dcaf-155">將這兩行程式碼加入互動式視窗來查看範例：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="3dcaf-156">請注意，答案非常接近最小 (負) 整數。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="3dcaf-157">這與 `min + 2` 相同。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-157">It's the same as `min + 2`.</span></span>

    <span data-ttu-id="3dcaf-158">此加法運算已**溢出**整數允許的值。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="3dcaf-159">此答案是非常大的負數，這是因為溢位會從最大整數值「回繞」至最小整數值。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="3dcaf-160">當 `int` 型別不符合您的需求時，還有其他具有不同限制和精確度的數字型別可供使用。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="3dcaf-161">我們會在下一篇探索那些數字型別。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-162">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-163">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3dcaf-164">使用 Double 型別</span><span class="sxs-lookup"><span data-stu-id="3dcaf-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="3dcaf-165">`double` 數字型別代表雙精確度浮點數。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-165">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="3dcaf-166">您可能不熟悉這些字詞。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-166">Those terms may be new to you.</span></span> <span data-ttu-id="3dcaf-167">**浮點數**可用以代表非常大或非常小的非整數數字。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-167">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id="3dcaf-168">**雙精確度**表示這些數字使用比**單精確度**更高的精確度來儲存。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-168">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="3dcaf-169">在現代的電腦上，比較常使用雙精確度而非單精確度數字。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-169">On modern computers, it is more common to use double precision than single precision numbers.</span></span>

    <span data-ttu-id="3dcaf-170">讓我們開始探索吧。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-170">Let's explore.</span></span> <span data-ttu-id="3dcaf-171">在互動式視窗中嘗試下列程式碼並查看結果：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-171">Try the following code in the interactive window and see the result:</span></span>


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="3dcaf-172">請注意答案包括商數的小數部分。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-172">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="3dcaf-173">請嘗試略為複雜的雙精確度浮點數運算式：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-173">Try a slightly more complicated expression with doubles:</span></span>


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="3dcaf-174">雙精確度浮點數值的範圍遠大於整數值。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-174">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="3dcaf-175">在互動式視窗中嘗試下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-175">Try the following code in the interactive window:</span></span>


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    <span data-ttu-id="3dcaf-176">這些值會以科學記號標記法呈現。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-176">These values are printed out in scientific notation.</span></span> <span data-ttu-id="3dcaf-177">`E` 左邊的數字是有效數字。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-177">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id="3dcaf-178">右邊的數字則為指數，亦即 10 的次方。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-178">The number to the right is the exponent, as a power of 10.</span></span>


    <span data-ttu-id="3dcaf-179">就像數學上的小數數字，C# 中的雙精確度浮點數會發生捨入誤差。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-179">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="3dcaf-180">請嘗試此程式碼：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-180">Try this code:</span></span>


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    <span data-ttu-id="3dcaf-181">如您所知，`0.3` 循環與 `1/3` 並不完全相同。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-181">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>


    <span data-ttu-id="3dcaf-182">***挑戰***</span><span class="sxs-lookup"><span data-stu-id="3dcaf-182">***Challenge***</span></span>


    <span data-ttu-id="3dcaf-183">嘗試使用 `double` 型別搭配大型數字、小型數字、乘法和除法的其他計算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-183">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="3dcaf-184">嘗試更複雜的計算。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-184">Try more complicated calculations.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-185">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-186">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3dcaf-187">使用固定點型別</span><span class="sxs-lookup"><span data-stu-id="3dcaf-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: >
    <span data-ttu-id="3dcaf-188">您已經看過 C# 中的基本數字型別：整數和雙精確度浮點數。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-188">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="3dcaf-189">還有一個您要了解的其他型別：`decimal` 型別。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-189">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="3dcaf-190">`decimal` 類型的範圍較小，但精確度較 `double` 來得高。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-190">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id="3dcaf-191">**固定點**這個詞代表小數點 (或二進位點) 不會移動。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-191">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="3dcaf-192">讓我們來看一下：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-192">Let's take a look:</span></span>


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    <span data-ttu-id="3dcaf-193">請注意該範圍小於 `double` 型別。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-193">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="3dcaf-194">透過嘗試下列程式碼，您可以看到 decimal (小數) 型別有較高的精確度：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-194">You can see the greater precision with the decimal type by trying the following code:</span></span>


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    <span data-ttu-id="3dcaf-195">數字上的 `M` 尾碼乃是指示常數應使用 `decimal` 型別。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-195">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>


    <span data-ttu-id="3dcaf-196">請注意，使用 decimal (小數) 型別的運算在小數點右邊會有更多的數字。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-196">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span>


    <span data-ttu-id="3dcaf-197">***挑戰***</span><span class="sxs-lookup"><span data-stu-id="3dcaf-197">***Challenge***</span></span>


    <span data-ttu-id="3dcaf-198">您已經了解不同的數字型別，接著請撰寫程式碼，以計算半徑 2.50 公分的圓形面積。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-198">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id="3dcaf-199">提醒您圓形面積是 PI 乘以半徑的平方。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-199">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="3dcaf-200">提示：.NET 包含 PI 的常數：<xref:System.Math.PI?displayProperty=nameWithType>，可用來作為該值。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-200">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-201">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-202">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>


    <span data-ttu-id="3dcaf-203">您應該會取得介於 19 和 20 的答案。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-203">You should get an answer between 19 and 20.</span></span>
- title: <span data-ttu-id="3dcaf-204">完成挑戰</span><span class="sxs-lookup"><span data-stu-id="3dcaf-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="3dcaf-205">您是否有得到與下列程式碼類似的內容？</span><span class="sxs-lookup"><span data-stu-id="3dcaf-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="3dcaf-206">如果您想要的話，可以嘗試其他公式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3dcaf-207">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3dcaf-208">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="3dcaf-209">您已經完成＜C# 中的數字＞互動式教學課程。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-209">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="3dcaf-210">您可以按一下以下的**分支和迴圈**連結來啟動下一個互動式教學課程，或者您可以瀏覽 [.NET 網站](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) \(英文\) 以下載 .NET Core SDK、在您的機器上建立專案，並繼續撰寫程式碼。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-210">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="3dcaf-211">「繼續學習」步驟會帶您回到這些教學課程。</span><span class="sxs-lookup"><span data-stu-id="3dcaf-211">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="3dcaf-212">您可以在下列主題中深入了解 C# 中的數字：</span><span class="sxs-lookup"><span data-stu-id="3dcaf-212">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="3dcaf-213">整數型別</span><span class="sxs-lookup"><span data-stu-id="3dcaf-213">Integral types</span></span>](../../language-reference/builtin-types/integral-numeric-types.md)

    - [<span data-ttu-id="3dcaf-214">浮點型別表</span><span class="sxs-lookup"><span data-stu-id="3dcaf-214">Floating-Point Types Table</span></span>](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [<span data-ttu-id="3dcaf-215">內建型別表</span><span class="sxs-lookup"><span data-stu-id="3dcaf-215">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="3dcaf-216">隱含數值轉換表</span><span class="sxs-lookup"><span data-stu-id="3dcaf-216">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="3dcaf-217">明確數值轉換表</span><span class="sxs-lookup"><span data-stu-id="3dcaf-217">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
