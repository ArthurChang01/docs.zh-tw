### YamlMime:Tutorial
title: <span data-ttu-id="d3a5d-101">使用字串插補來建構格式化的字串</span><span class="sxs-lookup"><span data-stu-id="d3a5d-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: 字串插補 - C# 互動式教學課程
  description: 在本教學課程中，您使用瀏覽器，以互動方式探索 C# 字串插補功能。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看程式碼編譯和執行的結果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="d3a5d-105">C# 中的集合</span><span class="sxs-lookup"><span data-stu-id="d3a5d-105">Collections in C#</span></span>
  ms.openlocfilehash: c8f93bd922b1003aafd50d5e95d92bcb492106c1
  ms.sourcegitcommit: ccd8c36b0d74d99291d41aceb14cf98d74dc9d2b
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 12/10/2018
  ms.locfileid: "53149207"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="d3a5d-106">此教學課程將教您如何使用[字串插補](../../language-reference/tokens/interpolated.md)在單一字串中插入值。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-106">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="d3a5d-107">您也會了解如何控制結果字串的文字格式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-107">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="d3a5d-108">您使用瀏覽器撰寫並執行 C# 程式碼，而且可以立即查看結果。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-108">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="d3a5d-109">建立插入字串</span><span class="sxs-lookup"><span data-stu-id="d3a5d-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"d3a5d-110\">在互動式視窗中執行下列程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"d3a5d-111\">若要這樣做，請在互動式視窗中鍵入程式碼 (將 `<name>`取代為您的名稱)，然後選取 [執行]：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-111\">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"d3a5d-112\">當您執行程式時，[輸出] 會顯示問候語中包含您名稱的字串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"d3a5d-113\"><xref:System.Console.WriteLine%2A> 方法呼叫的字串引數是「插入字串」。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"d3a5d-114\">它是一種範本，可讓您從包含內嵌程式碼的字串建構單一字串 (稱為「結果字串」)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"d3a5d-115\">插入字串特別適用於將值插入至字串或將數個字串串連 (聯結在一起)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"d3a5d-116\">上面的範例包含每個插入字串都必須要有的兩個項目：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"d3a5d-117\">左引號字元之前開頭為 `$` 字元的字串常值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"d3a5d-118\">`$` 符號與引號字元之間不能有任何空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"d3a5d-119\">(如果您想要查看包含空格時會發生什麼情況，請在互動式視窗中於 `$` 字元後面插入空格，然後執行已更新的程式碼。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"d3a5d-120\">C# 編譯器抱怨「未預期的字元 '$'」)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"d3a5d-121\">一或多個「插入運算式」。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"d3a5d-122\">插入運算式是以左右大括號 (`{` 和 `}`) 指出。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"d3a5d-123\">您可以放置任何 C# 運算式，以傳回大括號內的值 (包含 `null`)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"d3a5d-124\">嘗試更多包含一些其他資料類型的字串插補範例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"d3a5d-125\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"d3a5d-126\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="d3a5d-127">包含不同的資料類型</span><span class="sxs-lookup"><span data-stu-id="d3a5d-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"d3a5d-128\">在前一個步驟中，您使用字串插補將某個字串插入至另一個字串內部。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"d3a5d-129\">不過，插入運算式的結果可以是任意資料類型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"d3a5d-130\">請包含插入字串中各種資料類型的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"d3a5d-131\">在下列範例中，我們先定義具有 `Name` [屬性](../../properties.md)與 `ToString` [方法](../../methods.md)的[類別](../../programming-guide/classes-and-structs/classes.md)資料類型 `Vegetable`，它會[覆寫](../../language-reference/keywords/override.md) <xref:System.Object.ToString?displayProperty=nameWithType> 方法的行為。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-131\">In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"d3a5d-132\">[`public` 存取修飾詞](../../language-reference/keywords/public.md)會使該方法可用於取得任何用戶端程式碼，以取得 `Vegetable` 執行個體的字串表示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-132\">The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"d3a5d-133\">在此範例中，`Vegetable.ToString` 方法會傳回 `Name` 屬性的值，此屬性會在 `Vegetable` [建構函式](../../programming-guide/classes-and-structs/constructors.md)中初始化：`Vegetable(string name) => Name = name;`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"d3a5d-134\">接著，我們使用 [ `new`關鍵字](../../language-reference/keywords/new-operator.md)並提供建構函式名稱 `Vegetable`，建立名為 `item` 的 `Vegetable` 類別執行個體。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-134\">Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"d3a5d-135\">最後，我們將該執行個體併入插入字串，而此插入字串包含 <xref:System.DateTime> 值、<xref:System.Decimal> 值和 `Unit` [enumeration](../../programming-guide/enumeration-types.md) 值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"d3a5d-136\">在互動式視窗中執行下列程式碼：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, kilogram, gram, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"d3a5d-137\">請注意，插入字串中的插入運算式 `item` 會解析為結果字串中的文字 \"eggplant\"。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"d3a5d-138\">原因是，運算式結果的型別不是字串時，會使用下列方式將結果解析為字串：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"d3a5d-139\">如果插入運算式評估為 `null`，則會使用空字串 (\"\"，或 <xref:System.String.Empty?displayProperty=nameWithType>)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"d3a5d-140\">如果插入運算式未評估為 `null`，一般會呼叫結果類型的 `ToString` 方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"d3a5d-141\">測試這項作業的方式是更新 `Vegetable.ToString` 方法的實作。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"d3a5d-142\">您甚至可能不需要實作 `ToString` 方法，因為每個類型都有這個方法的某種實作。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-142\">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id=\"d3a5d-143\">若要測試此作業，請將範例中 `Vegetable.ToString` 方法的定義註解化 (作法是在其前面放置註解符號 `//`)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-143\">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id=\"d3a5d-144\">在輸出中，字串 \"eggplant\" 會取代為完整類型名稱 (C# REPL 所定義的命名空間與類型名稱)，這是 <xref:System.Object.ToString?displayProperty=nameWithType> 方法的預設行為。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"d3a5d-145\">列舉值 `ToString` 方法的預設行為是傳回該值的字串表示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-145\">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>    \n\n<span data-ttu-id=\"d3a5d-146\">在此範例的輸出中，日期太過精確 (eggplant 價格不會因第二個而變更)，而價格值未指出貨幣單位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"d3a5d-147\">在下一個步驟中，您將學習如何控制運算式結果的字串表示格式來修正這些問題。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"d3a5d-148\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"d3a5d-149\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3a5d-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="d3a5d-150">控制插入運算式的格式</span><span class="sxs-lookup"><span data-stu-id="d3a5d-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="d3a5d-151">在上一個步驟中，已將兩個格式不佳的字串插入至結果字串。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="d3a5d-152">其中一個是只有日期才適合的日期和時間值。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="d3a5d-153">第二個是未指出其貨幣單位的價格。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="d3a5d-154">這兩個問題都很容易解決。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-154">Both issues are easy to address.</span></span> <span data-ttu-id="d3a5d-155">字串插補可讓您指定「格式字串」，以控制特定類型的格式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="d3a5d-156">修改前一個範例中的 `Console.WriteLine` 呼叫，使其包含日期和價格運算式的格式字串，如下行所示：</span><span class="sxs-lookup"><span data-stu-id="d3a5d-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="d3a5d-157">在插入運算式後面接著冒號 (":") 和格式字串，即可指定格式字串。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="d3a5d-158">"d" 是[標準日期和時間格式字串](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，可呈現簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-158">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="d3a5d-159">"C2" 是[標準數值格式字串](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，可將數字呈現為小數點後面有兩位數的貨幣值。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-159">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="d3a5d-160">.NET 程式庫中有多種類型都支援一組預先定義的格式字串。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="d3a5d-161">其中包含所有數值類型以及日期和時間類型。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="d3a5d-162">如需支援格式字串之類型的完整清單，請參閱[在 .NET 中格式化類型](../../../standard/base-types/formatting-types.md)一文中的[格式字串和 .NET 類別庫類型](../../../standard/base-types/formatting-types.md#stringRef)。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="d3a5d-163">嘗試修改範例中的格式字串，以查看它們對日期和時間以及數值格式的影響。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="d3a5d-164">將 `{date:d}` 中的 "d" 變更為 "t" (顯示簡短時間格式)、"y" (顯示年份和月份) 以及 "yyyy" (將年份顯示為四位數)。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="d3a5d-165">將 `{price:C2}` 中的 "C2" 變更為 "e" (適用於指數標記法) 和 "F3" (適用於小數點後面有三位數的數值)。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="d3a5d-166">除了控制格式之外，您也可以控制結果字串中所含格式化字串的欄位寬度和對齊方式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="d3a5d-167">在下一步，您將學習如何執行這項作業。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d3a5d-168">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d3a5d-169">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d3a5d-170">控制插入運算式的欄位寬度和對齊方式</span><span class="sxs-lookup"><span data-stu-id="d3a5d-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="d3a5d-171">一般情況下，插入運算式的結果格式化為字串時，結果字串中會包含該字串，而且沒有前置或尾端空格。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="d3a5d-172">特別是當您使用一組資料時，可控制欄位寬度和文字對齊方式有助於產生更容易讀取的輸出。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="d3a5d-173">若要查看此結果，請執行下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="d3a5d-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="d3a5d-174">項目名稱會靠左對齊，而其數量會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="d3a5d-175">在插入運算式後面新增逗號 (",")，並指定「最小」欄位寬度，即可指定對齊方式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="d3a5d-176">如果指定的值是正數，則欄位會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="d3a5d-177">如果它是負數，則欄位會靠左對齊。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="d3a5d-178">嘗試移除 `{"Item",-25}` 和 `{item.Key,-25}` 程式碼中的負號，然後重新執行此範例。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="d3a5d-179">目前，項目名稱會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="d3a5d-180">您可以將對齊規範與格式字串結合為單一插入運算式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="d3a5d-181">若要這樣做，請先指定對齊方式，而且後面接著冒號和格式字串。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="d3a5d-182">嘗試下列程式碼，以顯示含有所定義欄位寬度的三個格式化字串：</span><span class="sxs-lookup"><span data-stu-id="d3a5d-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="d3a5d-183">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d3a5d-184">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="d3a5d-185">您已完成字串內插補點互動式教學課程。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-185">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="d3a5d-186">您可以按一下以下的 **C# 中的集合**連結來啟動下一個互動式教學課程，或者您可以瀏覽 [.NET 網站](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) \(英文\) 以下載 .NET Core SDK、在您的機器上建立專案，並繼續撰寫程式碼。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-186">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="d3a5d-187">「繼續學習」步驟會帶您回到這些教學課程。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-187">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="d3a5d-188">如需詳細資訊，請參閱[字串內插補點](../../language-reference/tokens/interpolated.md)。</span><span class="sxs-lookup"><span data-stu-id="d3a5d-188">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
