### YamlMime:Tutorial
title: <span data-ttu-id="98bc3-101">透過分支和迴圈陳述式了解條件式邏輯</span><span class="sxs-lookup"><span data-stu-id="98bc3-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: 分支和迴圈 - C# 互動式教學課程簡介
  description: 在本教學課程中，您將使用瀏覽器以互動方式學習有關 C# 的分支和迴圈。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看編譯和執行程式碼的結果。
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="98bc3-105">清單集合</span><span class="sxs-lookup"><span data-stu-id="98bc3-105">The list collection</span></span>
  ms.openlocfilehash: 62cc52e22406c6c19dad6cc800078e0d8f34f0d6
  ms.sourcegitcommit: d21bee9dbd32b9540ad30f9d0e2e874227040be3
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 04/09/2019
  ms.locfileid: "59427522"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="98bc3-106">此教學課程將教您如何撰寫程式碼來檢查變數，並根據那些變數來變更執行路徑。</span><span class="sxs-lookup"><span data-stu-id="98bc3-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="98bc3-107">您將以互動方式使用瀏覽器撰寫 C#，並查看編譯和執行程式碼的結果。</span><span class="sxs-lookup"><span data-stu-id="98bc3-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="98bc3-108">此教學課程包含一系列探索 C# 中分支和迴圈建構的課程。</span><span class="sxs-lookup"><span data-stu-id="98bc3-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="98bc3-109">這些課程會教導您 C# 語言的基本概念。</span><span class="sxs-lookup"><span data-stu-id="98bc3-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="98bc3-110">使用 if 陳述式來做決策</span><span class="sxs-lookup"><span data-stu-id="98bc3-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="98bc3-111">在互動式視窗中執行下列程式碼。</span><span class="sxs-lookup"><span data-stu-id="98bc3-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="98bc3-112">若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：</span><span class="sxs-lookup"><span data-stu-id="98bc3-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="98bc3-113">修改 `b` 的宣告，讓總和小於 10：</span><span class="sxs-lookup"><span data-stu-id="98bc3-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="98bc3-114">再按一下 [執行] 按鈕。</span><span class="sxs-lookup"><span data-stu-id="98bc3-114">Click the **Run** button again.</span></span> <span data-ttu-id="98bc3-115">因為答案小於 10，所以不會印出任何東西。</span><span class="sxs-lookup"><span data-stu-id="98bc3-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="98bc3-116">您正在測試的**條件**為 False。</span><span class="sxs-lookup"><span data-stu-id="98bc3-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="98bc3-117">您尚未有可執行的程式碼，因為您在 `if` 陳述式中僅撰寫了一個可能的分支：True 分支。</span><span class="sxs-lookup"><span data-stu-id="98bc3-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="98bc3-118">在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。</span><span class="sxs-lookup"><span data-stu-id="98bc3-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="98bc3-119">**編譯器**會找出那些錯誤並回報給您。</span><span class="sxs-lookup"><span data-stu-id="98bc3-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="98bc3-120">當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。</span><span class="sxs-lookup"><span data-stu-id="98bc3-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="98bc3-121">該練習將有助於您了解 C# 程式碼的結構。</span><span class="sxs-lookup"><span data-stu-id="98bc3-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="98bc3-122">此第一個範例示範 `if` 和布林型別的功能。</span><span class="sxs-lookup"><span data-stu-id="98bc3-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="98bc3-123">「布林」是一個變數，可能具有兩種值的其中之一：`true` 或 `false`。</span><span class="sxs-lookup"><span data-stu-id="98bc3-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="98bc3-124">C# 為布林變數定義了一個特殊型別：`bool`。</span><span class="sxs-lookup"><span data-stu-id="98bc3-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="98bc3-125">`if` 陳述式會檢查 `bool` 的值。</span><span class="sxs-lookup"><span data-stu-id="98bc3-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="98bc3-126">當值為 `true` 時，就會執行 `if` 之後的陳述式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="98bc3-127">否則，就會略過。</span><span class="sxs-lookup"><span data-stu-id="98bc3-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="98bc3-128">這個流程可以檢查條件，並根據條件來執行陳述式，因此非常實用。</span><span class="sxs-lookup"><span data-stu-id="98bc3-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="98bc3-129">讓我們來探索更多內容。</span><span class="sxs-lookup"><span data-stu-id="98bc3-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="98bc3-130">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="98bc3-131">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="98bc3-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="98bc3-132">搭配使用 if 和 else</span><span class="sxs-lookup"><span data-stu-id="98bc3-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"98bc3-133\">若要在 True 和 False 分支中執行不同的程式碼，則必須建立可在條件為 False 時執行的 `else` 分支。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"98bc3-134\">試試這個：</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"98bc3-135\">只有當測試的條件為 `false` 時，才會執行 `else` 關鍵字之後的陳述式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"98bc3-136\">將 `if` 和 `else` 結合布林值條件，就可提供您需要的所有功能。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"98bc3-137\">`if` 和 `else` 陳述式之下的縮排是為了方便人類閱讀。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"98bc3-138\">C# 語言不會將縮排或空白字元視為有意義的內容。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"98bc3-139\">`if` 或 `else` 關鍵字之後的陳述式將會根據條件來執行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"98bc3-140\">此教學課程中的所有範例都遵循常見的實務，根據陳述式的控制流程縮排程式碼行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"98bc3-141\">因為縮排沒有意義，當您要依條件執行的區塊中有超過一個陳述式時，就需要使用 `{` 和 `}` 來表示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"98bc3-142\">C# 程式設計人員通常會在所有的 `if` 和 `else` 子句上使用這些大括號。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"98bc3-143\">下列範例與您剛剛所建立的內容相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"98bc3-144\">試試看。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"98bc3-145\">本教學課程的其餘部分，程式碼範例都會遵循常見的做法，在程式碼中包含大括號。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"98bc3-146\">您可以測試更複雜的條件：</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"98bc3-147\">適用於*相等*的 `==` 符號測試。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"98bc3-148\">使用 `==` 可區分指派中相等的測試，您在 `a = 5` 中看過該指派。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"98bc3-149\">`&&` 代表「且」。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"98bc3-150\">這表示兩個條件都必須為 True，才會執行 True 分支中的陳述式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"98bc3-151\">這些範例也示範在每個條件式分支中可以有多個陳述式，前提是必須將陳述式放在 `{` 和 `}` 之中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"98bc3-152\">您也可以使用 `||` 來代表「或」：</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"98bc3-153\">修改 `a`、`b` 和 `c` 的值，並在 `&&` 和 `||` 之間切換以進行探索。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"98bc3-154\">您將更加了解 `&&` 和 `||` 運算子的工作原理。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"98bc3-155\">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"98bc3-156\">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。</span><span class=\"sxs-lookup\"><span data-stu-id=\"98bc3-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="98bc3-157">使用迴圈重複執行作業</span><span class="sxs-lookup"><span data-stu-id="98bc3-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="98bc3-158">若要建立較大型的程式，另一項重要的概念是**迴圈**。</span><span class="sxs-lookup"><span data-stu-id="98bc3-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="98bc3-159">您將使用迴圈來重複要執行一次以上的陳述式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="98bc3-160">在互動式視窗中嘗試這個程式碼：</span><span class="sxs-lookup"><span data-stu-id="98bc3-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="98bc3-161">`while` 陳述式會檢查條件，並執行 `while` 之後的陳述式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="98bc3-162">它會重複檢查條件並執行那些陳述式，直到條件為 False 為止。</span><span class="sxs-lookup"><span data-stu-id="98bc3-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="98bc3-163">在此範例中有一個新的運算子。</span><span class="sxs-lookup"><span data-stu-id="98bc3-163">There's one other new operator in this example.</span></span> <span data-ttu-id="98bc3-164">`counter` 變數之後的 `++` 是**遞增**運算子。</span><span class="sxs-lookup"><span data-stu-id="98bc3-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="98bc3-165">它會將 1 加到 counter (計數器) 上，並將該值儲存在 counter 變數中。</span><span class="sxs-lookup"><span data-stu-id="98bc3-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="98bc3-166">請確定 `while` 迴圈條件在您執行程式碼時會切換至 False。</span><span class="sxs-lookup"><span data-stu-id="98bc3-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="98bc3-167">否則，您建立的**無限迴圈**程式永遠不會結束。</span><span class="sxs-lookup"><span data-stu-id="98bc3-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="98bc3-168">我們不會示範這個部分，因為執行程式碼的引擎將會逾時，而您不會看到程式有任何輸出。</span><span class="sxs-lookup"><span data-stu-id="98bc3-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="98bc3-169">`while` 迴圈會先測試條件，然後才執行 `while` 之後的程式碼。</span><span class="sxs-lookup"><span data-stu-id="98bc3-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="98bc3-170">`do` ... `while` 迴圈會先執行程式碼，然後才檢查條件。</span><span class="sxs-lookup"><span data-stu-id="98bc3-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="98bc3-171">程式碼看起來像這樣：</span><span class="sxs-lookup"><span data-stu-id="98bc3-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="98bc3-172">此 `do` 迴圈和稍早的 `while` 迴圈有相同的功能。</span><span class="sxs-lookup"><span data-stu-id="98bc3-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="98bc3-173">讓我們繼續至最後一個迴圈陳述式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="98bc3-174">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="98bc3-175">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="98bc3-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="98bc3-176">使用 for 迴圈</span><span class="sxs-lookup"><span data-stu-id="98bc3-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="98bc3-177">您在 C# 程式碼中常看到的另一個迴圈陳述式是 `for` 迴圈。</span><span class="sxs-lookup"><span data-stu-id="98bc3-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="98bc3-178">在互動式視窗中嘗試這個程式碼：</span><span class="sxs-lookup"><span data-stu-id="98bc3-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="98bc3-179">這與先前使用的 `while` 迴圈和 `do` 迴圈有相同的功能。</span><span class="sxs-lookup"><span data-stu-id="98bc3-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="98bc3-180">`for` 陳述式有三個部分來控制其運作方式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="98bc3-181">第一個部分是 **for 初始設定式**：`int counter = 0;` 宣告 `counter` 是迴圈變數，然後將它的初始值設為 `0`。</span><span class="sxs-lookup"><span data-stu-id="98bc3-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="98bc3-182">中間的部分是 **for 條件**：`counter < 10` 宣告此 `for` 迴圈只要 counter (計數器) 的值小於 10，就會繼續執行。</span><span class="sxs-lookup"><span data-stu-id="98bc3-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="98bc3-183">最後一個部分是 **for 迭代器**：`counter++` 會指定在執行 `for` 陳述式之後的區塊後，如何修改迴圈變數。</span><span class="sxs-lookup"><span data-stu-id="98bc3-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="98bc3-184">在這裡，它指定 `counter` 應該在每次執行區塊之後遞增 1。</span><span class="sxs-lookup"><span data-stu-id="98bc3-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="98bc3-185">您可以自行實驗這些部分。</span><span class="sxs-lookup"><span data-stu-id="98bc3-185">Experiment with these yourself.</span></span> <span data-ttu-id="98bc3-186">請嘗試下列各項：</span><span class="sxs-lookup"><span data-stu-id="98bc3-186">Try each of the following:</span></span>


    - <span data-ttu-id="98bc3-187">變更初始設定式，以不同的值開始。</span><span class="sxs-lookup"><span data-stu-id="98bc3-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="98bc3-188">變更條件，以不同的值停止。</span><span class="sxs-lookup"><span data-stu-id="98bc3-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="98bc3-189">當您完成後，我們會繼續使用您學到的內容來撰寫一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="98bc3-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="98bc3-190">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="98bc3-191">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="98bc3-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="98bc3-192">結合分支和迴圈</span><span class="sxs-lookup"><span data-stu-id="98bc3-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="98bc3-193">您已經了解 C# 語言中的 `if` 陳述式和迴圈建構，接著看看您是否能夠撰寫 C# 程式碼，以找出從整數 1 至 20 能夠被 3 整除之數字的總和。</span><span class="sxs-lookup"><span data-stu-id="98bc3-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="98bc3-194">下列提供幾個提示：</span><span class="sxs-lookup"><span data-stu-id="98bc3-194">Here are a few hints:</span></span>


    - <span data-ttu-id="98bc3-195">`%` 運算子可提供除法運算的餘數。</span><span class="sxs-lookup"><span data-stu-id="98bc3-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="98bc3-196">`if` 陳述式可提供條件，以判斷數字是否應為總和的一部分。</span><span class="sxs-lookup"><span data-stu-id="98bc3-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="98bc3-197">`for` 迴圈可協助您將 1 到 20 的所有數字重複一系列的步驟。</span><span class="sxs-lookup"><span data-stu-id="98bc3-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="98bc3-198">請自己試試看。</span><span class="sxs-lookup"><span data-stu-id="98bc3-198">Try it yourself.</span></span> <span data-ttu-id="98bc3-199">然後檢查成果。</span><span class="sxs-lookup"><span data-stu-id="98bc3-199">Then check how you did.</span></span> <span data-ttu-id="98bc3-200">作為提示，您獲得的答案應該是 63。</span><span class="sxs-lookup"><span data-stu-id="98bc3-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="98bc3-201">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="98bc3-202">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="98bc3-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="98bc3-203">完成挑戰</span><span class="sxs-lookup"><span data-stu-id="98bc3-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="98bc3-204">您是否有得到與下列程式碼類似的內容？</span><span class="sxs-lookup"><span data-stu-id="98bc3-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="98bc3-205">此線上程式碼撰寫體驗仍處於預覽模式。</span><span class="sxs-lookup"><span data-stu-id="98bc3-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="98bc3-206">如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \(英文\) 中回報。</span><span class="sxs-lookup"><span data-stu-id="98bc3-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="98bc3-207">恭喜您！</span><span class="sxs-lookup"><span data-stu-id="98bc3-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="98bc3-208">您已經完成＜分支和迴圈＞互動式教學課程。</span><span class="sxs-lookup"><span data-stu-id="98bc3-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="98bc3-209">您可以按一下以下的**內插字串**連結來啟動下一個互動式教學課程，或者您可以瀏覽 [.NET 網站](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) \(英文\) 以下載 .NET Core SDK、在您的機器上建立專案，並繼續撰寫程式碼。</span><span class="sxs-lookup"><span data-stu-id="98bc3-209">You can click the **Interpolated strings** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="98bc3-210">「繼續學習」步驟會帶您回到這些教學課程。</span><span class="sxs-lookup"><span data-stu-id="98bc3-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="98bc3-211">您可以在下列主題中深入了解這些概念：</span><span class="sxs-lookup"><span data-stu-id="98bc3-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="98bc3-212">If 和 else 陳述式</span><span class="sxs-lookup"><span data-stu-id="98bc3-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="98bc3-213">While 陳述式</span><span class="sxs-lookup"><span data-stu-id="98bc3-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="98bc3-214">Do 陳述式</span><span class="sxs-lookup"><span data-stu-id="98bc3-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="98bc3-215">For 陳述式</span><span class="sxs-lookup"><span data-stu-id="98bc3-215">For statement</span></span>](../../language-reference/keywords/for.md)
